import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-6NOISVLF.js";

// node_modules/jsbelt/lib/belt.js
var require_belt = __commonJS({
  "node_modules/jsbelt/lib/belt.js"(exports, module) {
    (function() {
      var Belt = function() {
        var B = {};
        B["noop"] = function() {
          return;
        };
        B["identity"] = function(i) {
          return i;
        };
        if (typeof console !== "undefined" && console.log) {
          B["callog"] = function() {
            return console.log(B.stringify(arguments));
          };
        }
        B["callwrap"] = function(func, index, str2) {
          return function() {
            var a = [], args = arguments;
            str2 = str2 || "";
            if (typeof index !== "undefined" && Object.prototype.toString.call(index) === "[object Array]") {
              index.forEach(function(_i) {
                return a.push(B.get(args[_i], str2));
              });
            } else if (typeof index !== "undefined") {
              a.push(B.get(args[index], str2));
            }
            return func.apply(this, a);
          };
        };
        B["callset"] = function(func, obj2, key2, set_index, set_str, call_index, call_str) {
          return function() {
            if (B.typeof(func) === "array") {
              var args = arguments, called = false, len = func.length - 1;
              func.forEach(function(e, i) {
                var func2 = e[0], obj3 = e[1], key3 = e[2], set_index2 = e[3], set_str2 = e[4], call_index2 = e[5], call_str2 = e[6];
                if (B.typeof(set_str2) !== "string") {
                  call_index2 = set_str2;
                  set_str2 = "";
                }
                B.set(obj3, key3, B.get(args[set_index2 === void 0 ? 1 : set_index2], set_str2));
                if (!called && (!B.isNull(B.get(args[call_index2], call_str2)) || i === len)) {
                  called = true;
                  B.callwrap.call(null, func2, call_index2, call_str2).apply(this, args);
                }
              });
            } else {
              if (B.typeof(set_str) !== "string") {
                call_index = set_str;
                set_str = "";
              }
              B.set(obj2, key2, B.get(arguments[set_index === void 0 ? 1 : set_index], set_str));
              return B.callwrap.call(null, func, call_index, call_str).apply(this, arguments);
            }
          };
        };
        B["deepcallset"] = function(func, obj2, key2, set_index, pStr2, call_index, options) {
          var a = B.argulint(arguments);
          return function() {
            obj2[key2] = B._get(arguments[set_index === void 0 ? 1 : set_index], pStr2);
            var args = arguments;
            if (a.o.err_on_miss) {
              if (typeof obj2[key2] === "undefined" && (typeof call_index === "undefined" || !args[call_index]))
                args[call_index] = new Error("Missing value for '" + pStr2 + "', argument index " + set_index);
            }
            return B.callwrap.call(null, func, call_index, a.o.thisObj).apply(a.o.thisObj, args);
          };
        };
        B["deepcalldeepset"] = function(func, obj2, dStr, set_index, pStr2, call_index, options) {
          var a = B.argulint(arguments);
          return function() {
            B._set(obj2, dStr, B._get(arguments[set_index === void 0 ? 1 : set_index], pStr2));
            var args = arguments;
            if (a.o.err_on_miss) {
              if (typeof B._get(obj2, dStr) === "undefined" && (typeof call_index === "undefined" || !args[call_index]))
                args[call_index] = new Error("Missing value for '" + pStr2 + "', argument index " + set_index);
            }
            return B.callwrap.call(null, func, call_index, a.o.thisObj).apply(a.o.thisObj, args);
          };
        };
        B["callshift"] = function(func, args, obj2, sets, ts) {
          return function() {
            var _as = arguments, self2 = this;
            var trans = B.toArray(ts || []);
            trans.forEach(function(t2) {
              _as = t2.apply(self2, B.objVals(_as));
            });
            if (obj2 && sets)
              for (var s in sets) {
                if (typeof sets[s] === "function") {
                  B.set(obj2, s, sets[s].apply(self2, B.objVals(_as)));
                } else {
                  B.set(obj2, s, B.get(_as, sets[s]));
                }
              }
            var sargs = [];
            if (args) {
              sargs = B.sequence(function() {
                return void 0;
              }, Math.max(B.objVals(args)));
              for (var k2 in args) {
                if (typeof args[k2] === "number") {
                  sargs[k2] = _as[args[k2]];
                } else if (typeof args[k2] === "function") {
                  sargs[k2] = args[k2].apply(self2, _as);
                } else {
                  var v2 = B.get(_as, args[k2]);
                  if (typeof B.get(_as, args[k2]) !== "undefined") {
                    sargs[k2] = v2;
                  } else {
                    sargs[k2] = args[k2];
                  }
                }
              }
            }
            return func.apply(this, sargs);
          };
        };
        B["callloop"] = function(options, callback) {
          var a = B.argulint(arguments);
          a.o.this = a.o.this || this;
          a.o.cthis = a.o.cthis || this;
          a.o.eind = a.o.eind || 0;
          a.o.meth = a.o.meth || B.np;
          a.o.args = a.o.args || [];
          a.o.args = B.toArray(a.o.args);
          var awh = function() {
            return a.o.meth.apply(a.o.this, a.o.args.concat([function() {
              if (arguments[a.o.eind])
                return setTimeout(awh, a.o.int);
              return a.cb.apply(a.o.cthis, arguments);
            }]));
          };
          return awh();
        };
        B["np"] = B["noop"];
        B["cl"] = B["callog"];
        B["cw"] = B["callwrap"];
        B["cs"] = B["callset"];
        B["dcs"] = B["deepcallset"];
        B["dcds"] = B["deepcalldeepset"];
        B["csh"] = B["callshift"];
        B["clp"] = B["callloop"];
        B["stringify"] = function(obj2) {
          var _b = B.typeof(obj2);
          if (_b === "null")
            return "null";
          if (_b === "undefined")
            return "undefined";
          if (B.typeof(obj2).match(/^(string|number|boolean|function|regexp|date)$/))
            return B.call(obj2, "toString");
          var cache = [], str2 = JSON.stringify(obj2, function(k2, v2) {
            if (v2 instanceof Function || typeof v2 === "function") {
              return v2.toString();
            }
            if (v2 instanceof RegExp) {
              return "_PxEgEr_" + v2;
            }
            if (typeof v2 === "object" && v2 !== null) {
              if (cache.indexOf(v2) !== -1) {
                return;
              }
              cache.push(v2);
            }
            return v2;
          }, 2);
          cache = null;
          return str2;
        };
        B["parse"] = function(str, date2obj) {
          var iso8061 = date2obj ? /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/ : false;
          return JSON.parse(str, function(k, v) {
            var prefix;
            if (typeof v !== "string") {
              return v;
            }
            if (v.length < 8) {
              return v;
            }
            prefix = v.substring(0, 8);
            if (iso8061 && v.match(iso8061)) {
              return new Date(v);
            }
            if (prefix === "function" && v.indexOf("native code") < 0) {
              return eval("(" + v + ")");
            }
            if (prefix === "_PxEgEr_") {
              return eval(v.slice(8));
            }
            return v;
          });
        };
        B["copy"] = function(obj2, shallow_copy) {
          if (typeof obj2 !== "object") {
            return obj2;
          }
          if (!shallow_copy) {
            return B.parse(B.stringify(obj2));
          }
          var clone2;
          if (Object.prototype.toString.call(obj2) === "[object Array]") {
            clone2 = [];
            obj2.forEach(function(e) {
              return clone2.push(e);
            });
          } else {
            clone2 = {};
            for (var k2 in obj2) {
              clone2[k2] = obj2[k2];
            }
          }
          return clone2;
        };
        B["deepCopy"] = B["copy"];
        B["toObject"] = function(src) {
          if (typeof src !== "object")
            return {};
          if (!src)
            return {};
          var keys2 = Object.keys(src);
          if (!keys2)
            return {};
          return B.deepObj(keys2, Array.isArray(src) ? src : B.objVals(src));
        };
        B["deepMerge"] = function(target, src) {
          if (typeof src !== "object")
            return target;
          if (typeof target !== "object")
            return src;
          var array = Array.isArray(target), sarray = Array.isArray(src), dst = array && [] || {};
          if (target && typeof target === "object") {
            Object.keys(target).forEach(function(key2) {
              dst[key2] = target[key2];
            });
          }
          Object.keys(src).forEach(function(key2) {
            if (typeof src[key2] !== "object" || !src[key2]) {
              dst[key2] = src[key2];
            } else {
              if (!target[key2]) {
                dst[key2] = src[key2];
              } else {
                dst[key2] = B.deepMerge(target[key2], src[key2]);
              }
            }
          });
          return dst;
        };
        B["extend"] = function(obj2, extender) {
          if (typeof obj2 !== "object")
            return {};
          var ext = B.toArray(extender);
          var exArgs = B.objVals(arguments).slice(2);
          ext = ext.concat(exArgs);
          ext.forEach(function(e) {
            var _e = e || {};
            obj2 = B.deepMerge(obj2, _e);
            return;
          });
          return obj2;
        };
        B["deepEqual"] = function(obj2, obj22) {
          if (B.typeof(obj2) !== B.typeof(obj22))
            return false;
          if (typeof obj2 === "number" && typeof obj22 === "number") {
            if (B.isNaN(obj2) && B.isNaN(obj22))
              return true;
            if (obj2 === 0 && obj22 === 0)
              return true;
            if (obj2 === 0 && obj22 !== 0)
              return false;
            if (obj2 !== 0 && obj22 === 0)
              return false;
            if (obj2 === Infinity && obj22 === Infinity)
              return true;
            if (obj2 === Infinity && obj22 !== Infinity)
              return false;
            if (obj2 !== Infinity && obj22 === Infinity)
              return false;
            if (obj2 === -Infinity && obj22 === -Infinity)
              return true;
            if (obj2 === -Infinity && obj22 !== -Infinity)
              return false;
            if (obj2 !== -Infinity && obj22 === -Infinity)
              return false;
            return obj2 === obj22;
          }
          if (!B.isNull(obj2) && !B.isNull(obj22) && obj2.constructor !== obj22.constructor)
            return false;
          if (obj2 === void 0 && obj22 === void 0)
            return true;
          if (obj2 === void 0 && obj22 !== void 0)
            return false;
          if (obj2 !== void 0 && obj22 === void 0)
            return false;
          if (obj2 === false && obj22 === false)
            return true;
          if (obj2 === false && obj22 !== false)
            return false;
          if (obj2 !== false && obj22 === false)
            return false;
          if (obj2 === null && obj22 === null)
            return true;
          if (obj2 === null && obj22 !== null)
            return false;
          if (obj2 !== null && obj22 === null)
            return false;
          if (typeof obj2 === "string" && typeof obj22 === "string")
            return obj2 === obj22;
          if (obj2 instanceof Date && obj22 instanceof Date)
            return obj2.getTime() === obj22.getTime();
          if (obj2 instanceof RegExp)
            return obj22 instanceof RegExp && obj2.toString() === obj22.toString();
          var eq2 = true, keys2 = {};
          for (var k2 in obj2) {
            keys2[k2] = true;
            if (obj2[k2] instanceof RegExp) {
              eq2 = obj2[k2].toString() === obj22[k2].toString();
            } else if (B.isPlainObj(obj2[k2])) {
              eq2 = B.deepEqual(obj2[k2], obj22[k2]);
            } else if (Array.isArray(obj2[k2])) {
              if (!Array.isArray(obj22[k2]) || obj22[k2].length !== obj2[k2].length)
                return false;
              for (var i = 0; i < obj2[k2].length; i++)
                if (!B.deepEqual(obj2[k2][i], obj22[k2][i]))
                  return false;
            } else {
              eq2 = obj22.hasOwnProperty(k2) && B.stringify(obj2[k2]) === B.stringify(obj22[k2]);
            }
            if (!eq2)
              return eq2;
          }
          for (var j in obj22)
            if (!keys2[j])
              return false;
          return eq2;
        };
        B["equal"] = B.deepEqual;
        B["esplit"] = function(str2, del, opts2) {
          str2 = B.cast(str2, "string");
          var uid = B.uuid(), rid = new RegExp(uid, "g");
          str2 = str2.replace(new RegExp("\\\\\\" + del, "g"), uid);
          if (opts2) {
            if (opts2.trim) {
              str2 = str2.replace(new RegExp("^\\" + del + "+|\\" + del + "+$", "g"), "");
            }
          }
          var p = str2.split(del);
          for (var i = 0; i < p.length; i++)
            p[i] = p[i].replace(rid, del);
          return p;
        };
        B["pescape"] = function(str2) {
          return B.cast(str2, "string").replace(/\\\./g, ".").replace(/\./g, "\\.");
        };
        B["deepProp"] = function(obj, _pStr, opts) {
          if (!obj || _pStr === "" || _pStr === void 0 || _pStr === null || _pStr === false || !_pStr.toString) {
            return obj;
          }
          var pStr = B.cast(_pStr, "string"), props = B.esplit(pStr, ".", { "trim": true });
          if (!props) {
            return obj;
          }
          var pobj = obj;
          while (props.length > 0) {
            if (props[0].match(/^\[\]/)) {
              if (B.typeof(pobj) !== "array")
                return void 0;
              props.shift();
              props = props.join(".");
              var aVals = [];
              pobj.forEach(function(v2) {
                aVals.push(B.get(v2, props, opts));
              });
              pobj = aVals;
              break;
            } else if (props[0].match(/^\{\}/)) {
              if (B.typeof(pobj) !== "object")
                return void 0;
              props.shift();
              props = props.join(".");
              var oVals = {};
              for (var k in pobj) {
                oVals[k] = B.get(pobj[k], props, opts);
              }
              pobj = oVals;
              break;
            } else if (props[0].match(/^eval\(.*#.*\)$/)) {
              try {
                pobj = eval(props.shift().replace(/^eval\(|\)$/g, "").replace(/#/, "pobj"));
                pobj = B.get(pobj, props.join("."), opts);
                break;
              } catch (e) {
                return void 0;
              }
            } else if (props[0].match(/[^\(]+\(.*\)$/)) {
              try {
                pobj = eval("pobj." + props.shift());
                pobj = B.get(pobj, props.join("."), opts);
                break;
              } catch (e) {
                return void 0;
              }
            } else {
              pobj = pobj[props[0]];
              if (!pobj) {
                break;
              }
              props.shift();
            }
          }
          return pobj;
        };
        B["isPropDefined"] = function(obj2, pStr2) {
          return typeof B.deepProp(obj2, pStr2) === "undefined" ? false : true;
        };
        B["has"] = function(obj2, pStr2) {
          var ps = B.pathStat(obj2, pStr2);
          return B.call(ps, "parent.hasOwnProperty", B.get(ps, "lpath"));
        };
        B["setDeepProp"] = function(obj2, pStr2, val) {
          if (!obj2 || !pStr2) {
            obj2 = val;
            return obj2;
          }
          var props2 = B.esplit(pStr2, ".", { "trim": true }), pobj2 = obj2 || {}, p, c;
          while (props2.length) {
            p = props2.shift();
            if (p.match(/^\[\]/)) {
              pobj2 = B.cast(pobj2, "array");
              c = props2.join(".");
              for (var i = 0; i < pobj2.length; i++) {
                pobj2[i] = B.set(pobj2[i], c, val);
              }
              return obj2;
            } else if (p.match(/^\{\}/)) {
              pobj2 = B.cast(pobj2, "object");
              c = props2.join(".");
              for (var k2 in pobj2) {
                pobj2[k2] = B.set(pobj2[k2], c, val);
              }
              return obj2;
            } else if (!props2.length) {
              pobj2[p] = val;
            } else {
              if (!B.typeof(pobj2[p]).match(/^(object|array)$/))
                pobj2[p] = {};
              pobj2 = pobj2[p];
            }
          }
          return obj2;
        };
        B["transform"] = function(obj2, pStr2, iter) {
          iter = B.typeof(iter) === "function" ? iter : B.identity;
          if (!obj2 || !pStr2) {
            obj2 = iter(obj2);
            return obj2;
          }
          var props2 = B.esplit(pStr2, ".", { "trim": true }), pobj2 = obj2 || {}, prev, p, p2, c;
          while (props2.length) {
            p = props2.shift();
            if (p.match(/^\[\]/)) {
              pobj2 = B.cast(pobj2, "array");
              if (prev && prev[p2])
                prev[p2] = pobj2;
              c = props2.join(".");
              for (var i = 0; i < pobj2.length; i++) {
                pobj2[i] = B.transform(pobj2[i], c, iter);
              }
              return obj2;
            } else if (p.match(/^\{\}/)) {
              pobj2 = B.cast(pobj2, "object");
              if (prev && prev[p2])
                prev[p2] = pobj2;
              c = props2.join(".");
              for (var k2 in pobj2) {
                pobj2[k2] = B.transform(pobj2[k2], c, iter);
              }
              return obj2;
            } else if (!props2.length) {
              pobj2[p] = iter(pobj2[p], obj2);
            } else {
              if (!B.typeof(pobj2[p]).match(/^(object|array)$/))
                pobj2[p] = {};
              prev = pobj2;
              p2 = p;
              pobj2 = pobj2[p];
            }
          }
          return obj2;
        };
        B["defObj"] = function(keys2, def) {
          var obj2 = {}, ckeys = B.toArray(B.copy(keys2));
          ckeys.forEach(function(k2) {
            return obj2[k2] = B.copy(def);
          });
          return obj2;
        };
        B["delete"] = function(obj, _pStr, opts) {
          if (!obj || _pStr === "" || _pStr === void 0 || _pStr === null || _pStr === false || !_pStr.toString) {
            return obj;
          }
          var pStr = B.cast(_pStr, "string"), props = B.esplit(pStr, ".", { "trim": true });
          if (!props) {
            return obj;
          }
          var pobj = obj;
          while (props.length > 1) {
            if (props[0].match(/^\[\]/)) {
              if (B.typeof(pobj) !== "array")
                return void 0;
              props.shift();
              props = props.join(".");
              var aVals = [];
              pobj.forEach(function(v2) {
                aVals.push(B.delete(v2, props, opts));
              });
              pobj = aVals;
              break;
            } else if (props[0].match(/^\{\}/)) {
              if (B.typeof(pobj) !== "object")
                return void 0;
              props.shift();
              props = props.join(".");
              var oVals = {};
              for (var k in pobj) {
                oVals[k] = B.delete(pobj[k], props, opts);
              }
              pobj = oVals;
              break;
            } else if (props[0].match(/^eval\(.*#.*\)$/)) {
              try {
                pobj = eval(props.shift().replace(/^eval\(|\)$/g, "").replace(/#/, "pobj"));
                pobj = B.delete(pobj, props.join("."), opts);
                break;
              } catch (e) {
                return void 0;
              }
            } else if (props[0].match(/[^\(]+\(.*\)$/)) {
              try {
                pobj = eval("pobj." + props.shift());
                pobj = B.delete(pobj, props.join("."), opts);
                break;
              } catch (e) {
                return void 0;
              }
            } else {
              pobj = pobj[props[0]];
              if (!pobj) {
                break;
              }
              props.shift();
            }
          }
          var t = B.typeof(pobj);
          if (t === "array") {
            if (props[0] === "[]") {
              pobj.splice(0, pobj.length);
            } else {
              pobj.splice(props[0], 1);
            }
          } else if (t === "object") {
            if (props[0] === "{}") {
              for (var key in pobj) {
                delete pobj[key];
              }
            } else {
              delete pobj[props[0]];
            }
          }
          return obj;
        };
        B["objVals"] = function(obj2) {
          var vals = [];
          if (!obj2)
            return vals;
          for (var k2 in obj2) {
            vals.push(obj2[k2]);
          }
          return vals;
        };
        B["objDenull"] = function(obj2) {
          var o = {};
          if (!obj2 || B.typeof(o) !== "object")
            return o;
          for (var k2 in obj2) {
            if (!B.isNull(obj2[k2]))
              o[k2] = obj2[k2];
          }
          return o;
        };
        B["objDefalse"] = function(obj2) {
          var o = {};
          if (!obj2 || B.typeof(o) !== "object")
            return o;
          for (var k2 in obj2) {
            if (obj2[k2])
              o[k2] = obj2[k2];
          }
          return o;
        };
        B["arrayDenull"] = function(obj2) {
          var o = [];
          if (!obj2 || B.typeof(o) !== "array")
            return o;
          obj2.forEach(function(v2) {
            if (!B.isNull(v2))
              o.push(v2);
          });
          return o;
        };
        B["arrayDefalse"] = function(obj2) {
          var o = [];
          if (!obj2 || B.typeof(o) !== "array")
            return o;
          obj2.forEach(function(v2) {
            if (v2)
              o.push(v2);
          });
          return o;
        };
        B["deepObj"] = function(keys2, values2, options) {
          var vals = typeof values2 !== "undefined" ? values2 : !Array.isArray(keys2) ? B.objVals(keys2) : [], _keys = Array.isArray(keys2) ? keys2 : Object.keys(keys2), obj2 = {}, o = options || {};
          if (o.flat) {
            _keys.forEach(function(k2, i) {
              return obj2[k2] = vals[i];
            });
          } else {
            _keys.forEach(function(k2, i) {
              return B.set(obj2, k2, vals[i]);
            });
          }
          return obj2;
        };
        B["deepDefault"] = function(obj2, pStr2, def) {
          var ret = B.get(obj2, pStr2);
          if (typeof ret === "undefined") {
            B.set(obj2, pStr2, def);
            ret = def;
          }
          return ret;
        };
        B["deepCall"] = function(obj2, pStr2) {
          var pArr = B.esplit(pStr2, ".", { "trim": true }), pObj = B["deepProp"](obj2, pArr.slice(0, pArr.length - 1).join("."));
          if (!pObj)
            return void 0;
          var func = B["deepProp"](obj2, pStr2);
          if (typeof func !== "function")
            return void 0;
          return pObj[pArr.pop()].apply(pObj, Array.prototype.slice.call(arguments, 2));
        };
        B["chainCall"] = function(obj2) {
          var args = Array.prototype.slice.call(arguments, 1);
          var val = obj2;
          for (var i = 0; i < args.length; i++) {
            var _a = B.toArray(args[i]);
            _a.unshift(val);
            val = B.call.apply(B, _a);
            if (typeof val === "undefined" && _a.length === 2)
              val = B.get.apply(B, _a);
            if (typeof val === "undefined")
              break;
          }
          return val;
        };
        B["deepFind"] = function(obj2, pStr2) {
          if (!obj2)
            return void 0;
          var prop = B._get(obj2, pStr2);
          if (typeof prop !== "undefined")
            return prop;
          var sPStr = B._call(B.sanitize(pStr2), "replace", /(\W|\s)/g, "");
          prop = obj2;
          if (!sPStr)
            return prop;
          var found;
          do {
            found = false;
            if (typeof prop !== "object")
              break;
            var keys2 = Object.keys(prop);
            for (var i = 0; i < keys2.length; i++) {
              var re = new RegExp("^" + keys2[i], "i");
              if (!sPStr.match(re))
                continue;
              prop = prop[keys2[i]];
              sPStr = sPStr.replace(re, "");
              found = true;
              break;
            }
          } while (found && sPStr);
          if (!found && sPStr)
            prop = void 0;
          return prop;
        };
        B["deepMatch"] = function(obj2, path) {
          var o = B.objFlatten(obj2);
          if (!o || B.isEmpty(o))
            return {};
          if (path === "")
            return { "": obj2 };
          if (!path)
            return {};
          var k2 = Object.keys(o), r = new RegExp(path.replace(/\./g, "\\.").replace(/\$\$/g, "[^\\.]*"));
          k2.forEach(function(p) {
            if (!p.match(r))
              delete o[p];
            return;
          });
          return o;
        };
        B["objIndex"] = function(obj2, ind, val) {
          if (!obj2)
            return void 0;
          obj2 = B.cast(obj2, "object");
          ind = ind || 0;
          if (val)
            return (B.objVals(obj2) || [])[ind];
          return (Object.keys(obj2) || [])[ind];
        };
        B["deepPick"] = function(obj2, pAr) {
          if (!obj2 || typeof obj2 !== "object" || Array.isArray(obj2))
            return obj2;
          if (!pAr || pAr.length === 0)
            return {};
          var nObj = {};
          pAr.forEach(function(p) {
            if (typeof p === "object") {
              var k2 = Object.keys(p)[0];
              return B.set(nObj, k2, p[k2].call(obj2, k2, pAr));
            }
            var pr = B.get(obj2, p);
            if (typeof pr === "undefined")
              return;
            return B.set(nObj, p, pr);
          });
          return nObj;
        };
        B["objMatch"] = function(obj2, mObj) {
          if (!obj2 || typeof obj2 !== "object")
            return false;
          if (!mObj || typeof mObj !== "object")
            return false;
          var m = true;
          for (var k2 in mObj) {
            if (!B.deepEqual(obj2[k2], mObj[k2])) {
              m = false;
              break;
            }
          }
          return m;
        };
        B["isNull"] = function(o) {
          return o === null || o === void 0;
        };
        B["isEmpty"] = function(o) {
          return B.isNull(o) || !B.isObj(o) || B.deepEqual(o, {}) || B.deepEqual(o, []);
        };
        B["isBlank"] = function(o) {
          var t2 = B.typeof(o);
          if (t2 === "string")
            return o === "";
          return B.cast(o, "string") === "";
        };
        B["isPlainObj"] = function(o) {
          return !B.isNull(o) && typeof o === "object" && o.constructor === Object;
        };
        B["isObj"] = function(o) {
          return B.isPlainObj(o) || Array.isArray(o);
        };
        B["objFlatten"] = function(obj2, options, cobj, pre) {
          var fobj = cobj || {}, _o = options || {}, prf = pre || "";
          for (var k2 in obj2) {
            var _p = prf + (prf ? "." : "") + k2;
            if (!_o.deepest || !B.isObj(obj2[k2])) {
              fobj[_p] = obj2[k2];
              if (_o.stop_on_arrays && Array.isArray(obj2[k2]))
                continue;
            } else if (_o.deepest && (Array.isArray(obj2[k2]) && obj2[k2].length === 0 || B.equal({}, obj2[k2])) || _o.stop_on_arrays && Array.isArray(obj2[k2])) {
              fobj[_p] = obj2[k2];
              continue;
            }
            if (B.isObj(obj2[k2]))
              B.objFlatten(obj2[k2], _o, fobj, _p);
          }
          if (!cobj)
            fobj = B.objSort(fobj, "length", { "flat": true });
          return fobj;
        };
        B["_get"] = B.deepProp;
        B["_set"] = B.setDeepProp;
        B["get"] = B.deepProp;
        B["set"] = B.setDeepProp;
        B["_call"] = B.deepCall;
        B["call"] = B.deepCall;
        B["_chain"] = B.chainCall;
        B["chain"] = B.chainCall;
        B["_find"] = B.deepFind;
        B["find"] = B.deepFind;
        B["def"] = B.deepDefault;
        B["default"] = B.deepDefault;
        B["match"] = B.deepMatch;
        B["objDiff"] = function(a, b) {
          var d = {};
          if (!a || !B.isObj(a))
            a = {};
          if (!b || !B.isObj(b))
            return { "$unset": Object.keys(a), "$set": { "": b }, "$type": { "": B.typeof(b) } };
          var _a = B.objFlatten(a), _b = B.objFlatten(b);
          d.$type = {};
          d.$type[""] = B.typeof(b);
          for (var k2 in _b) {
            var __a = B.typeof(_a[k2]), __b = B.typeof(_b[k2]);
            if (__a === __b || !__b.match(/object|array/))
              continue;
            d.$type[k2] = __b;
          }
          d.$unset = B.difference(Object.keys(_a), Object.keys(_b));
          var i = 0;
          while (i < d.$unset.length) {
            var re = new RegExp("^" + d.$unset[i].replace(/\./, "\\.") + "\\.");
            d.$unset = B.filter(d.$unset, function(e) {
              return !re.test(e);
            });
            i++;
          }
          d.$set = {};
          _a = B.objFlatten(a, { "deepest": true });
          _b = B.objFlatten(b, { "deepest": true });
          var set = B.difference(Object.keys(_b), d.$unset);
          i = 0;
          while (i < set.length) {
            if (!B.deepEqual(_b[set[i]], _a[set[i]])) {
              var _re = new RegExp("^" + set[i].replace(/\./, "\\.") + "(\\.|$)");
              d.$unset = B.filter(d.$unset, function(e) {
                return !_re.test(e);
              });
              d.$set[set[i]] = _b[set[i]];
            }
            i++;
          }
          d.$set = B.objSort(d.$set, "length", { "flat": true });
          d.$type = B.objSort(d.$type, "length", { "flat": true });
          d.$unset = B.sort(d.$unset, "length");
          return d;
        };
        B["objSort"] = function(obj2, iter, options) {
          obj2 = B.cast(obj2, "object") || {};
          var _o = options || {};
          var ks = B.sort(_o.values ? B.objVals(obj2) : Object.keys(obj2), iter), vs = B.map(ks, function(s) {
            return obj2[s];
          });
          return B.deepObj(ks, vs, _o);
        };
        B["objToArray"] = function(obj2) {
          var a = [];
          if (!obj2 || !B.isObj(obj2))
            return a;
          var i;
          for (var k2 in obj2) {
            i = parseInt(k2, 10);
            if (B.isNaN(i))
              continue;
            a[parseInt(k2, 10)] = obj2[k2];
          }
          return a;
        };
        B["pathStat"] = function(obj2, path) {
          var e = B.get(obj2, path);
          var s = {
            "type": B.typeof(e)
          };
          var pc = B.esplit(path, ".", { "trim": true }), lp = pc.pop(), p = pc.join(".");
          s.val = e;
          s.lpath = lp;
          if (lp !== "") {
            s.ppath = p;
            s.parent = B.get(obj2, s.ppath);
            s.ptype = B.typeof(s.parent);
            s.is_el = s.ptype === "array";
          }
          s.comp = B.pathComp(path);
          s.has = B.call(s, "parent.hasOwnProperty", s.lpath);
          return s;
        };
        B["pathComp"] = function(path) {
          var c = [], p = B.esplit(B.cast(path, "string") || "", ".", { "trim": true });
          while (p.length > 0) {
            c.unshift(p.join("."));
            p.pop();
          }
          if (c[0] !== "")
            c.unshift("");
          return c;
        };
        B["objPatch"] = function(obj2, patch) {
          if (patch.$type[""] === "array" && !B.isObj(obj2))
            obj2 = [];
          if (patch.$type[""] === "object" && !B.isObj(obj2))
            obj2 = {};
          if (patch.$set[""] && !B.isObj(patch.$set[""]))
            return patch.$set[""];
          for (var k2 in patch.$set) {
            B.set(obj2, k2, patch.$set[k2]);
          }
          for (var _k in patch.$type) {
            var _p = B.get(obj2, _k);
            if (B.typeof(_p) !== patch.$type[_k])
              obj2 = B.set(obj2, _k, B[patch.$type[_k] === "array" ? "objToArray" : "toObject"](_p));
          }
          var ar = {};
          patch.$unset.forEach(function(e) {
            var pstat = B.pathStat(obj2, e);
            if (pstat.is_el) {
              var _pp = ar[pstat.ppath] || 0;
              return ar[pstat.ppath] = ++_pp;
            }
            return B.delete(obj2, e);
          });
          for (var a in ar) {
            (B.get(obj2, a) || []).splice(ar[a]);
          }
          return obj2;
        };
        B["sequence"] = function(iter, count) {
          var a = [];
          for (var i = 0; i < count; i++) {
            a.push(iter.call(a, i, count, iter));
          }
          return a;
        };
        B["nullArray"] = function(size2) {
          return B.sequence(function() {
            return void 0;
          }, size2);
        };
        B["defArray"] = function(size2, def) {
          return B.sequence(function() {
            return B.copy(def);
          }, size2);
        };
        B["toArray"] = function(obj2) {
          return Array.isArray(obj2) ? obj2 : [obj2];
        };
        B["toObject"] = function(arr) {
          var rv = {};
          if (!Array.isArray(arr))
            return rv;
          for (var i = 0; i < arr.length; ++i)
            if (arr[i] !== void 0)
              rv[i] = arr[i];
          return rv;
        };
        B["deArray"] = function(obj2) {
          return Array.isArray(obj2) && obj2.length === 1 ? obj2[0] : obj2;
        };
        B["map"] = function(ar, iter) {
          var res = [];
          ar.forEach(function(e, i) {
            return res.push(iter(e, i));
          });
          return res;
        };
        B["filter"] = function(ar, iter) {
          var res = [];
          if (!ar)
            return res;
          ar = B.cast(ar, "array") || [];
          var it = B.typeof(iter);
          if (it !== "function") {
            var str2 = B.copy(iter);
            iter = function(a) {
              return a === str2;
            };
          }
          ar.forEach(function(e, i) {
            if (iter.call(ar, e, i))
              res.push(e);
            return;
          });
          return res;
        };
        B["sort"] = function(ar, iter) {
          if (!ar)
            return [];
          ar = B.cast(ar, "array") || [];
          var it = B.typeof(iter);
          if (it !== "function") {
            var str2 = B.cast(iter, "string");
            iter = function(a, b) {
              return B.get(a, str2) > B.get(b, str2) ? 1 : -1;
            };
          }
          return ar.sort(iter);
        };
        B["deepPluck"] = function(ar, pStr2) {
          var a = B.toArray(ar);
          return B.map(a, function(e) {
            return B._get(e, pStr2);
          });
        };
        B["splitArray"] = function(array, size2) {
          var count = array.length / size2, parts = [];
          if (Math.floor(count) !== count)
            count++;
          for (var i = 1; i <= count; i++)
            parts.push(array.slice((i - 1) * size2, i * size2));
          return parts;
        };
        B["find"] = function(array, value, options) {
          if (!array)
            return void 0;
          var fd, f, ind = 0, _o = options || {}, it;
          _o["method"] = _o.method || "get";
          it = B.typeof(value);
          if (it !== "function" && _o.path) {
            it = function(a) {
              return B.equal(B[_o.method](a, _o.path), value);
            };
          } else if (it !== "function") {
            it = function(a) {
              return B.equal(a, value);
            };
          } else {
            it = value;
          }
          while (!f && ind < array.length) {
            if (it(array[ind])) {
              fd = array[ind];
              f = true;
            }
            ind++;
          }
          return _o.index && f ? --ind : fd;
        };
        B["findIndex"] = function(array, value) {
          return this.find(array, value, { "index": true });
        };
        B["difference"] = function(a, __a) {
          var d = [], self2 = this;
          if (!a || !Array.isArray(a))
            return d;
          if (!Array.isArray(__a) || !__a)
            return a;
          var _a = self2.copy(__a);
          a.forEach(function(e, i) {
            var ind = self2.findIndex(_a, e);
            if (self2.isNull(ind))
              return d.push(e);
            return _a.splice(ind, 1);
          });
          return d;
        };
        B["arrayContained"] = function(a, __a) {
          return B.equal([], B.difference(a, __a));
        };
        B["arrayIndifferent"] = function(a, __a) {
          return B.arrayContained(a, __a) && B.arrayContained(__a, a);
        };
        B["arrayDiff"] = function(a, b) {
          var d = {
            "$push": {},
            "$pull": {},
            "$position": {}
          }, uuids = {}, self2 = this;
          var _b = self2.copy(b), _a = self2.copy(a);
          _a.forEach(function(e, i) {
            var ind = self2.findIndex(_b, e);
            if (self2.isNull(ind)) {
              d.$pull[i] = e;
            } else if (ind !== i) {
              d.$position[i] = ind;
            }
            var id = B.uuid();
            uuids[id] = true;
            _a[i] = id;
            return _b[ind] = id;
          });
          _b.forEach(function(e, i) {
            if (typeof e === "string" && uuids[e])
              return;
            var ind = self2.findIndex(_a, e);
            if (self2.isNull(ind))
              d.$push[i] = e;
            return;
          });
          return d;
        };
        B["arrayToObj"] = function(array, path) {
          var obj2 = {};
          array.forEach(function(a) {
            var key2 = B.cast(B.get(a, path), "string");
            obj2[key2] = a;
          });
          return obj2;
        };
        B["arrayCast"] = function(array, type) {
          var _arr = B.cast(array, "array");
          return B.map(_arr, function(a) {
            return B.cast(a, type);
          });
        };
        B["arrayCombinations"] = function() {
          var r = [], arg = arguments, max2 = arg.length - 1;
          function helper(arr, i) {
            for (var j = 0, l = arg[i].length; j < l; j++) {
              var a = arr.slice(0);
              a.push(arg[i][j]);
              if (i === max2) {
                r.push(a);
              } else {
                helper(a, i + 1);
              }
            }
          }
          helper([], 0);
          return r;
        };
        B["arrayCombinationsOfSize"] = function(set, k2) {
          if (k2 > set.length || k2 <= 0)
            return [];
          if (k2 === set.length)
            return [set];
          var i, j, combs, head, tailcombs;
          if (k2 === 1) {
            combs = [];
            for (i = 0; i < set.length; i++) {
              combs.push([set[i]]);
            }
            return combs;
          }
          combs = [];
          for (i = 0; i < set.length - k2 + 1; i++) {
            head = set.slice(i, i + 1);
            tailcombs = B.arrayCombinationsOfSize(set.slice(i + 1), k2 - 1);
            for (j = 0; j < tailcombs.length; j++)
              combs.push(head.concat(tailcombs[j]));
          }
          return combs;
        };
        B["random_int"] = function(min_incl, max_excl) {
          return Math.floor(Math.random() * (max_excl - min_incl)) + min_incl;
        };
        B["random_bool"] = function() {
          return B.random_int(0, 2) % 2 === 0 ? true : false;
        };
        B["random_els"] = function(array, count) {
          count = count || 1;
          var sample2 = [], copy = B.copy(array);
          for (var i = 0; i < count; i++) {
            var ind = B.random_int(0, copy.length);
            sample2.push(copy.slice(ind, ind + 1).shift());
          }
          return count === 1 ? sample2[0] : sample2;
        };
        B["random_string"] = function(size2, chars) {
          var rand_chars = chars ? B.copy(chars) : "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
          if (!Array.isArray(rand_chars))
            rand_chars = rand_chars.split("");
          return B.toArray(B.random_els(rand_chars, size2)).join("");
        };
        B["sanitize"] = function(str2) {
          return B._chain(str2, ["replace", /\'/g], ["replace", /\W/g, " "], ["toLowerCase"]);
        };
        B["alpha_match"] = function(str2) {
          return new RegExp(B.cail(str2, "replace", /\W/g, "[\\W]*") || "", "gi");
        };
        B["capitalize"] = function(str2) {
          return B._call(str2, "replace", /\w\S*/g, function(s) {
            return s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();
          });
        };
        B["uuid"] = function() {
          return ("10000000-1000-4000-8000" + -1e11).replace(/1|0/g, function() {
            return (0 | Math.random() * 16).toString(16);
          });
        };
        B["fix_precision"] = function(float, precision) {
          precision = typeof precision === "undefined" ? 5 : parseInt(precision, 10);
          return parseFloat(parseFloat(float).toFixed(precision).toString());
        };
        B["email_regexp"] = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        B["strip_html"] = function(str2, opts2) {
          var o = opts2 || {};
          str2 = B.cast(str2, "string");
          if (o.breaks)
            str2 = str2.replace(/<br>|<br \/>/gm, "\n");
          return str2.replace(/<(?:.|\n)*?>/gm, "");
        };
        B["isValidJSON"] = function(jStr) {
          if (typeof jStr !== "string")
            return false;
          return /^[\],:{}\s]*$/.test(
            jStr.replace(/\\["\\\/bfnrtu]/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, "")
          );
        };
        B["parseJSON"] = function(jStr) {
          return B.isValidJSON(jStr) ? JSON.parse(jStr) : new Error("Invalid JSON");
        };
        B["$$jsonFrags"] = {};
        B["parseFrag"] = function(options) {
          var o = options || {}, bank = o.bank || this.$$jsonFrags, buf = o.bank[o.id] || "", obj2;
          try {
            obj2 = Belt.parse(buf + o.string);
          } catch (e) {
            try {
              obj2 = Belt.parse(o.string);
            } catch (_e) {
              o.bank[o.id] = buf + o.string;
              return null;
            }
            delete o.bank[o.id];
            return obj2;
          }
          delete o.bank[o.id];
          return obj2;
        };
        B["isNumber"] = function(val) {
          if (typeof val === "number" && !B.isNaN(val))
            return true;
          var pi = parseInt(val, 10);
          if (typeof pi !== "undefined" && pi.toString() === val)
            return true;
          if (typeof pi === "undefined")
            return false;
          pi = parseFloat(val, 10);
          if (typeof pi !== "undefined" && pi.toString() === val)
            return true;
          return false;
        };
        B["isNaN"] = function(val) {
          return typeof val === "number" && val !== +val;
        };
        B["isInt"] = function(val) {
          var pi = parseInt(val, 10);
          if (typeof pi !== "undefined" && !B.isNaN(pi) && (typeof val === "number" && val === pi || pi.toString() === val))
            return true;
          return false;
        };
        B["typeof"] = function(val) {
          var t2 = typeof val;
          if (t2.match(/string|number|boolean|function|undefined/))
            return t2;
          if (val === null)
            return "null";
          if (Array.isArray(val))
            return "array";
          var n = B.get(val, "constructor.name");
          if (n === "Date")
            return "date";
          if (n === "RegExp")
            return "regexp";
          return t2;
        };
        B["cast"] = function(a, type) {
          type = String(type) || "";
          if (!type.match(/^(string|number|boolean|date|regexp|object|array|function|undefined|null)$/))
            return a;
          var _a, ta = B.typeof(a);
          if (ta === type)
            return a;
          if (type === "object") {
            if (ta === "array")
              return B.toObject(a);
            if (B.isNull(a))
              return {};
            return a ? B.deepObj([B.cast(a, "string")], [a]) : {};
          }
          if (type === "array") {
            if (ta === "object") {
              _a = B.objToArray(a);
              return _a.length > 0 ? _a : B.objVals(a);
            }
            if (B.isNull(a))
              return [];
            return a ? [a] : [];
          }
          if (type === "string") {
            if (B.isNull(a))
              return "";
            if (ta === "object")
              return Object.keys(a).length > 0 ? B.stringify(a) : "";
            if (ta === "array")
              return a.length > 0 ? B.stringify(a) : "";
            if (B.isNull(a))
              return "";
            return String(a);
          }
          if (type === "number") {
            if (B.isNull(a) || B.isBlank(a))
              return void 0;
            if (ta === "object" && Object.keys(a).length <= 0)
              return void 0;
            if (ta === "array" && a.length <= 0)
              return void 0;
            return Number(a);
          }
          if (type === "boolean") {
            if (ta === "object" && Object.keys(a).length <= 0)
              return false;
            if (ta === "array" && a.length <= 0)
              return false;
            return a && !B.call(a, "match", /^false$/i) ? true : false;
          }
          if (type === "date") {
            if (B.isNull(a) || B.isBlank(a))
              return void 0;
            if (ta === "object" && Object.keys(a).length <= 0)
              return void 0;
            if (ta === "array" && a.length <= 0)
              return void 0;
            return new Date(a);
          }
          if (type === "regexp") {
            if (B.isNull(a) || B.isBlank(a))
              return void 0;
            if (ta === "object" && Object.keys(a).length <= 0)
              return void 0;
            if (ta === "array" && a.length <= 0)
              return void 0;
            return RegExp(a);
          }
          if (type === "function") {
            if (!a)
              return void 0;
            if (ta === "object" && Object.keys(a).length <= 0)
              return void 0;
            if (ta === "array" && a.length <= 0)
              return void 0;
            return B.np;
          }
          if (type === "undefined") {
            return void 0;
          }
          if (type === "null") {
            return null;
          }
          return a;
        };
        B["deepCast"] = function(obj2, pStr2, type) {
          obj2 = B.transform(obj2, pStr2, function(i) {
            return B.cast(i, type);
          });
          return obj2;
        };
        B["objCast"] = function(obj2, schema, opts2) {
          opts2 = opts2 || {};
          var val;
          if (opts2.skip_null)
            for (var k2 in schema) {
              val = B.get(obj2, k2);
              if (B.isNull(val))
                continue;
              B.set(obj2, k2, B.cast(val, schema[k2]));
            }
          else {
            for (var j in schema) {
              val = B.get(obj2, j);
              B.set(obj2, j, B.cast(val, schema[j]));
            }
          }
          return obj2;
        };
        B["objSanitize"] = function(obj2, schema, opts2) {
          if (!schema)
            return obj2;
          schema = B.cast(schema || [], "array");
          var o = {};
          schema.forEach(function(s) {
            s["transform"] = s.transform || B.identity;
            var val = s.transform(B.get(obj2, s.get), obj2, opts2, o, s);
            if (s.test && !s.test(val, obj2, opts2, o, s))
              return;
            return B.set(o, s.set, val);
          });
          return o;
        };
        B["isError"] = function(obj2) {
          return B.get(Object.prototype.toString.call(obj2), "match(/Error/)") ? true : false;
        };
        B["argulint"] = function(args, options) {
          var opts2 = options || {}, largs = opts2.defaults ? B.copy(opts2.defaults) : {};
          if (opts2.templates) {
            Object.keys(opts2.templates).forEach(function(k2) {
              if (typeof opts2.templates[k2] !== "function") {
                return largs[k2] = args[opts2.templates[k2]];
              }
              return largs[k2] = opts2.templates[k2].call(largs, args, options);
            });
          }
          if (!largs.callback && !opts2.no_callback && !(largs.callback = opts2.callback)) {
            for (var a = args.length - 1; a >= 0; a--) {
              if (typeof args[a] !== "function") {
                continue;
              }
              largs.callback = args[a];
              break;
            }
            if (typeof largs.callback === "undefined")
              largs.callback = B.noop;
          }
          if (!largs.options && !opts2.no_options && !(largs.options = opts2.options)) {
            for (var b = args.length - 1; b >= 0; b--) {
              if (typeof args[b] !== "object" || Array.isArray(args[b])) {
                continue;
              }
              largs.options = args[b];
              break;
            }
            if (typeof largs.options === "undefined")
              largs.options = {};
          }
          if (opts2.validators) {
            Object.keys(opts2.validators).forEach(function(k2) {
              var func, err, v2 = B.toArray(opts2.validators[k2]);
              return v2.forEach(function(vs) {
                if (typeof vs === "function") {
                  func = vs;
                } else {
                  func = vs.validator;
                  err = vs.error;
                }
                if (!func.call(largs[k2], largs, args, options)) {
                  throw new Error(err || 'Argument "' + k2 + '" is invalid');
                }
                return;
              });
            });
          }
          if (!opts2.no_aliases) {
            largs.o = largs.options;
            largs.cb = largs.callback;
          }
          return largs;
        };
        if (typeof window !== "undefined") {
          B["isMobile"] = function() {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(B.get(window, "navigator.userAgent")) ? true : false;
          };
        }
        return B;
      };
      if (typeof module !== "undefined") {
        module.exports = new Belt();
      } else {
        this.Belt = new Belt();
      }
    }).call(exports);
  }
});

// node_modules/underscore/modules/_setup.js
var VERSION, root, ArrayProto, ObjProto, SymbolProto, push, slice, toString, hasOwnProperty, supportsArrayBuffer, supportsDataView, nativeIsArray, nativeKeys, nativeCreate, nativeIsView, _isNaN, _isFinite, hasEnumBug, nonEnumerableProps, MAX_ARRAY_INDEX;
var init_setup = __esm({
  "node_modules/underscore/modules/_setup.js"() {
    VERSION = "1.13.7";
    root = typeof self == "object" && self.self === self && self || typeof global == "object" && global.global === global && global || Function("return this")() || {};
    ArrayProto = Array.prototype;
    ObjProto = Object.prototype;
    SymbolProto = typeof Symbol !== "undefined" ? Symbol.prototype : null;
    push = ArrayProto.push;
    slice = ArrayProto.slice;
    toString = ObjProto.toString;
    hasOwnProperty = ObjProto.hasOwnProperty;
    supportsArrayBuffer = typeof ArrayBuffer !== "undefined";
    supportsDataView = typeof DataView !== "undefined";
    nativeIsArray = Array.isArray;
    nativeKeys = Object.keys;
    nativeCreate = Object.create;
    nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;
    _isNaN = isNaN;
    _isFinite = isFinite;
    hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
    nonEnumerableProps = [
      "valueOf",
      "isPrototypeOf",
      "toString",
      "propertyIsEnumerable",
      "hasOwnProperty",
      "toLocaleString"
    ];
    MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  }
});

// node_modules/underscore/modules/restArguments.js
function restArguments(func, startIndex) {
  startIndex = startIndex == null ? func.length - 1 : +startIndex;
  return function() {
    var length = Math.max(arguments.length - startIndex, 0), rest2 = Array(length), index = 0;
    for (; index < length; index++) {
      rest2[index] = arguments[index + startIndex];
    }
    switch (startIndex) {
      case 0:
        return func.call(this, rest2);
      case 1:
        return func.call(this, arguments[0], rest2);
      case 2:
        return func.call(this, arguments[0], arguments[1], rest2);
    }
    var args = Array(startIndex + 1);
    for (index = 0; index < startIndex; index++) {
      args[index] = arguments[index];
    }
    args[startIndex] = rest2;
    return func.apply(this, args);
  };
}
var init_restArguments = __esm({
  "node_modules/underscore/modules/restArguments.js"() {
  }
});

// node_modules/underscore/modules/isObject.js
function isObject(obj2) {
  var type = typeof obj2;
  return type === "function" || type === "object" && !!obj2;
}
var init_isObject = __esm({
  "node_modules/underscore/modules/isObject.js"() {
  }
});

// node_modules/underscore/modules/isNull.js
function isNull(obj2) {
  return obj2 === null;
}
var init_isNull = __esm({
  "node_modules/underscore/modules/isNull.js"() {
  }
});

// node_modules/underscore/modules/isUndefined.js
function isUndefined(obj2) {
  return obj2 === void 0;
}
var init_isUndefined = __esm({
  "node_modules/underscore/modules/isUndefined.js"() {
  }
});

// node_modules/underscore/modules/isBoolean.js
function isBoolean(obj2) {
  return obj2 === true || obj2 === false || toString.call(obj2) === "[object Boolean]";
}
var init_isBoolean = __esm({
  "node_modules/underscore/modules/isBoolean.js"() {
    init_setup();
  }
});

// node_modules/underscore/modules/isElement.js
function isElement(obj2) {
  return !!(obj2 && obj2.nodeType === 1);
}
var init_isElement = __esm({
  "node_modules/underscore/modules/isElement.js"() {
  }
});

// node_modules/underscore/modules/_tagTester.js
function tagTester(name) {
  var tag = "[object " + name + "]";
  return function(obj2) {
    return toString.call(obj2) === tag;
  };
}
var init_tagTester = __esm({
  "node_modules/underscore/modules/_tagTester.js"() {
    init_setup();
  }
});

// node_modules/underscore/modules/isString.js
var isString_default;
var init_isString = __esm({
  "node_modules/underscore/modules/isString.js"() {
    init_tagTester();
    isString_default = tagTester("String");
  }
});

// node_modules/underscore/modules/isNumber.js
var isNumber_default;
var init_isNumber = __esm({
  "node_modules/underscore/modules/isNumber.js"() {
    init_tagTester();
    isNumber_default = tagTester("Number");
  }
});

// node_modules/underscore/modules/isDate.js
var isDate_default;
var init_isDate = __esm({
  "node_modules/underscore/modules/isDate.js"() {
    init_tagTester();
    isDate_default = tagTester("Date");
  }
});

// node_modules/underscore/modules/isRegExp.js
var isRegExp_default;
var init_isRegExp = __esm({
  "node_modules/underscore/modules/isRegExp.js"() {
    init_tagTester();
    isRegExp_default = tagTester("RegExp");
  }
});

// node_modules/underscore/modules/isError.js
var isError_default;
var init_isError = __esm({
  "node_modules/underscore/modules/isError.js"() {
    init_tagTester();
    isError_default = tagTester("Error");
  }
});

// node_modules/underscore/modules/isSymbol.js
var isSymbol_default;
var init_isSymbol = __esm({
  "node_modules/underscore/modules/isSymbol.js"() {
    init_tagTester();
    isSymbol_default = tagTester("Symbol");
  }
});

// node_modules/underscore/modules/isArrayBuffer.js
var isArrayBuffer_default;
var init_isArrayBuffer = __esm({
  "node_modules/underscore/modules/isArrayBuffer.js"() {
    init_tagTester();
    isArrayBuffer_default = tagTester("ArrayBuffer");
  }
});

// node_modules/underscore/modules/isFunction.js
var isFunction, nodelist, isFunction_default;
var init_isFunction = __esm({
  "node_modules/underscore/modules/isFunction.js"() {
    init_tagTester();
    init_setup();
    isFunction = tagTester("Function");
    nodelist = root.document && root.document.childNodes;
    if (typeof /./ != "function" && typeof Int8Array != "object" && typeof nodelist != "function") {
      isFunction = function(obj2) {
        return typeof obj2 == "function" || false;
      };
    }
    isFunction_default = isFunction;
  }
});

// node_modules/underscore/modules/_hasObjectTag.js
var hasObjectTag_default;
var init_hasObjectTag = __esm({
  "node_modules/underscore/modules/_hasObjectTag.js"() {
    init_tagTester();
    hasObjectTag_default = tagTester("Object");
  }
});

// node_modules/underscore/modules/_stringTagBug.js
var hasDataViewBug, isIE11;
var init_stringTagBug = __esm({
  "node_modules/underscore/modules/_stringTagBug.js"() {
    init_setup();
    init_hasObjectTag();
    hasDataViewBug = supportsDataView && (!/\[native code\]/.test(String(DataView)) || hasObjectTag_default(new DataView(new ArrayBuffer(8))));
    isIE11 = typeof Map !== "undefined" && hasObjectTag_default(/* @__PURE__ */ new Map());
  }
});

// node_modules/underscore/modules/isDataView.js
function alternateIsDataView(obj2) {
  return obj2 != null && isFunction_default(obj2.getInt8) && isArrayBuffer_default(obj2.buffer);
}
var isDataView, isDataView_default;
var init_isDataView = __esm({
  "node_modules/underscore/modules/isDataView.js"() {
    init_tagTester();
    init_isFunction();
    init_isArrayBuffer();
    init_stringTagBug();
    isDataView = tagTester("DataView");
    isDataView_default = hasDataViewBug ? alternateIsDataView : isDataView;
  }
});

// node_modules/underscore/modules/isArray.js
var isArray_default;
var init_isArray = __esm({
  "node_modules/underscore/modules/isArray.js"() {
    init_setup();
    init_tagTester();
    isArray_default = nativeIsArray || tagTester("Array");
  }
});

// node_modules/underscore/modules/_has.js
function has(obj2, key2) {
  return obj2 != null && hasOwnProperty.call(obj2, key2);
}
var init_has = __esm({
  "node_modules/underscore/modules/_has.js"() {
    init_setup();
  }
});

// node_modules/underscore/modules/isArguments.js
var isArguments, isArguments_default;
var init_isArguments = __esm({
  "node_modules/underscore/modules/isArguments.js"() {
    init_tagTester();
    init_has();
    isArguments = tagTester("Arguments");
    (function() {
      if (!isArguments(arguments)) {
        isArguments = function(obj2) {
          return has(obj2, "callee");
        };
      }
    })();
    isArguments_default = isArguments;
  }
});

// node_modules/underscore/modules/isFinite.js
function isFinite2(obj2) {
  return !isSymbol_default(obj2) && _isFinite(obj2) && !isNaN(parseFloat(obj2));
}
var init_isFinite = __esm({
  "node_modules/underscore/modules/isFinite.js"() {
    init_setup();
    init_isSymbol();
  }
});

// node_modules/underscore/modules/isNaN.js
function isNaN2(obj2) {
  return isNumber_default(obj2) && _isNaN(obj2);
}
var init_isNaN = __esm({
  "node_modules/underscore/modules/isNaN.js"() {
    init_setup();
    init_isNumber();
  }
});

// node_modules/underscore/modules/constant.js
function constant(value) {
  return function() {
    return value;
  };
}
var init_constant = __esm({
  "node_modules/underscore/modules/constant.js"() {
  }
});

// node_modules/underscore/modules/_createSizePropertyCheck.js
function createSizePropertyCheck(getSizeProperty) {
  return function(collection) {
    var sizeProperty = getSizeProperty(collection);
    return typeof sizeProperty == "number" && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
  };
}
var init_createSizePropertyCheck = __esm({
  "node_modules/underscore/modules/_createSizePropertyCheck.js"() {
    init_setup();
  }
});

// node_modules/underscore/modules/_shallowProperty.js
function shallowProperty(key2) {
  return function(obj2) {
    return obj2 == null ? void 0 : obj2[key2];
  };
}
var init_shallowProperty = __esm({
  "node_modules/underscore/modules/_shallowProperty.js"() {
  }
});

// node_modules/underscore/modules/_getByteLength.js
var getByteLength_default;
var init_getByteLength = __esm({
  "node_modules/underscore/modules/_getByteLength.js"() {
    init_shallowProperty();
    getByteLength_default = shallowProperty("byteLength");
  }
});

// node_modules/underscore/modules/_isBufferLike.js
var isBufferLike_default;
var init_isBufferLike = __esm({
  "node_modules/underscore/modules/_isBufferLike.js"() {
    init_createSizePropertyCheck();
    init_getByteLength();
    isBufferLike_default = createSizePropertyCheck(getByteLength_default);
  }
});

// node_modules/underscore/modules/isTypedArray.js
function isTypedArray(obj2) {
  return nativeIsView ? nativeIsView(obj2) && !isDataView_default(obj2) : isBufferLike_default(obj2) && typedArrayPattern.test(toString.call(obj2));
}
var typedArrayPattern, isTypedArray_default;
var init_isTypedArray = __esm({
  "node_modules/underscore/modules/isTypedArray.js"() {
    init_setup();
    init_isDataView();
    init_constant();
    init_isBufferLike();
    typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
    isTypedArray_default = supportsArrayBuffer ? isTypedArray : constant(false);
  }
});

// node_modules/underscore/modules/_getLength.js
var getLength_default;
var init_getLength = __esm({
  "node_modules/underscore/modules/_getLength.js"() {
    init_shallowProperty();
    getLength_default = shallowProperty("length");
  }
});

// node_modules/underscore/modules/_collectNonEnumProps.js
function emulatedSet(keys2) {
  var hash = {};
  for (var l = keys2.length, i = 0; i < l; ++i)
    hash[keys2[i]] = true;
  return {
    contains: function(key2) {
      return hash[key2] === true;
    },
    push: function(key2) {
      hash[key2] = true;
      return keys2.push(key2);
    }
  };
}
function collectNonEnumProps(obj2, keys2) {
  keys2 = emulatedSet(keys2);
  var nonEnumIdx = nonEnumerableProps.length;
  var constructor = obj2.constructor;
  var proto = isFunction_default(constructor) && constructor.prototype || ObjProto;
  var prop = "constructor";
  if (has(obj2, prop) && !keys2.contains(prop))
    keys2.push(prop);
  while (nonEnumIdx--) {
    prop = nonEnumerableProps[nonEnumIdx];
    if (prop in obj2 && obj2[prop] !== proto[prop] && !keys2.contains(prop)) {
      keys2.push(prop);
    }
  }
}
var init_collectNonEnumProps = __esm({
  "node_modules/underscore/modules/_collectNonEnumProps.js"() {
    init_setup();
    init_isFunction();
    init_has();
  }
});

// node_modules/underscore/modules/keys.js
function keys(obj2) {
  if (!isObject(obj2))
    return [];
  if (nativeKeys)
    return nativeKeys(obj2);
  var keys2 = [];
  for (var key2 in obj2)
    if (has(obj2, key2))
      keys2.push(key2);
  if (hasEnumBug)
    collectNonEnumProps(obj2, keys2);
  return keys2;
}
var init_keys = __esm({
  "node_modules/underscore/modules/keys.js"() {
    init_isObject();
    init_setup();
    init_has();
    init_collectNonEnumProps();
  }
});

// node_modules/underscore/modules/isEmpty.js
function isEmpty(obj2) {
  if (obj2 == null)
    return true;
  var length = getLength_default(obj2);
  if (typeof length == "number" && (isArray_default(obj2) || isString_default(obj2) || isArguments_default(obj2)))
    return length === 0;
  return getLength_default(keys(obj2)) === 0;
}
var init_isEmpty = __esm({
  "node_modules/underscore/modules/isEmpty.js"() {
    init_getLength();
    init_isArray();
    init_isString();
    init_isArguments();
    init_keys();
  }
});

// node_modules/underscore/modules/isMatch.js
function isMatch(object2, attrs) {
  var _keys = keys(attrs), length = _keys.length;
  if (object2 == null)
    return !length;
  var obj2 = Object(object2);
  for (var i = 0; i < length; i++) {
    var key2 = _keys[i];
    if (attrs[key2] !== obj2[key2] || !(key2 in obj2))
      return false;
  }
  return true;
}
var init_isMatch = __esm({
  "node_modules/underscore/modules/isMatch.js"() {
    init_keys();
  }
});

// node_modules/underscore/modules/underscore.js
function _(obj2) {
  if (obj2 instanceof _)
    return obj2;
  if (!(this instanceof _))
    return new _(obj2);
  this._wrapped = obj2;
}
var init_underscore = __esm({
  "node_modules/underscore/modules/underscore.js"() {
    init_setup();
    _.VERSION = VERSION;
    _.prototype.value = function() {
      return this._wrapped;
    };
    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
    _.prototype.toString = function() {
      return String(this._wrapped);
    };
  }
});

// node_modules/underscore/modules/_toBufferView.js
function toBufferView(bufferSource) {
  return new Uint8Array(
    bufferSource.buffer || bufferSource,
    bufferSource.byteOffset || 0,
    getByteLength_default(bufferSource)
  );
}
var init_toBufferView = __esm({
  "node_modules/underscore/modules/_toBufferView.js"() {
    init_getByteLength();
  }
});

// node_modules/underscore/modules/isEqual.js
function eq(a, b, aStack, bStack) {
  if (a === b)
    return a !== 0 || 1 / a === 1 / b;
  if (a == null || b == null)
    return false;
  if (a !== a)
    return b !== b;
  var type = typeof a;
  if (type !== "function" && type !== "object" && typeof b != "object")
    return false;
  return deepEq(a, b, aStack, bStack);
}
function deepEq(a, b, aStack, bStack) {
  if (a instanceof _)
    a = a._wrapped;
  if (b instanceof _)
    b = b._wrapped;
  var className = toString.call(a);
  if (className !== toString.call(b))
    return false;
  if (hasDataViewBug && className == "[object Object]" && isDataView_default(a)) {
    if (!isDataView_default(b))
      return false;
    className = tagDataView;
  }
  switch (className) {
    case "[object RegExp]":
    case "[object String]":
      return "" + a === "" + b;
    case "[object Number]":
      if (+a !== +a)
        return +b !== +b;
      return +a === 0 ? 1 / +a === 1 / b : +a === +b;
    case "[object Date]":
    case "[object Boolean]":
      return +a === +b;
    case "[object Symbol]":
      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    case "[object ArrayBuffer]":
    case tagDataView:
      return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
  }
  var areArrays = className === "[object Array]";
  if (!areArrays && isTypedArray_default(a)) {
    var byteLength = getByteLength_default(a);
    if (byteLength !== getByteLength_default(b))
      return false;
    if (a.buffer === b.buffer && a.byteOffset === b.byteOffset)
      return true;
    areArrays = true;
  }
  if (!areArrays) {
    if (typeof a != "object" || typeof b != "object")
      return false;
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(isFunction_default(aCtor) && aCtor instanceof aCtor && isFunction_default(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
      return false;
    }
  }
  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;
  while (length--) {
    if (aStack[length] === a)
      return bStack[length] === b;
  }
  aStack.push(a);
  bStack.push(b);
  if (areArrays) {
    length = a.length;
    if (length !== b.length)
      return false;
    while (length--) {
      if (!eq(a[length], b[length], aStack, bStack))
        return false;
    }
  } else {
    var _keys = keys(a), key2;
    length = _keys.length;
    if (keys(b).length !== length)
      return false;
    while (length--) {
      key2 = _keys[length];
      if (!(has(b, key2) && eq(a[key2], b[key2], aStack, bStack)))
        return false;
    }
  }
  aStack.pop();
  bStack.pop();
  return true;
}
function isEqual(a, b) {
  return eq(a, b);
}
var tagDataView;
var init_isEqual = __esm({
  "node_modules/underscore/modules/isEqual.js"() {
    init_underscore();
    init_setup();
    init_getByteLength();
    init_isTypedArray();
    init_isFunction();
    init_stringTagBug();
    init_isDataView();
    init_keys();
    init_has();
    init_toBufferView();
    tagDataView = "[object DataView]";
  }
});

// node_modules/underscore/modules/allKeys.js
function allKeys(obj2) {
  if (!isObject(obj2))
    return [];
  var keys2 = [];
  for (var key2 in obj2)
    keys2.push(key2);
  if (hasEnumBug)
    collectNonEnumProps(obj2, keys2);
  return keys2;
}
var init_allKeys = __esm({
  "node_modules/underscore/modules/allKeys.js"() {
    init_isObject();
    init_setup();
    init_collectNonEnumProps();
  }
});

// node_modules/underscore/modules/_methodFingerprint.js
function ie11fingerprint(methods) {
  var length = getLength_default(methods);
  return function(obj2) {
    if (obj2 == null)
      return false;
    var keys2 = allKeys(obj2);
    if (getLength_default(keys2))
      return false;
    for (var i = 0; i < length; i++) {
      if (!isFunction_default(obj2[methods[i]]))
        return false;
    }
    return methods !== weakMapMethods || !isFunction_default(obj2[forEachName]);
  };
}
var forEachName, hasName, commonInit, mapTail, mapMethods, weakMapMethods, setMethods;
var init_methodFingerprint = __esm({
  "node_modules/underscore/modules/_methodFingerprint.js"() {
    init_getLength();
    init_isFunction();
    init_allKeys();
    forEachName = "forEach";
    hasName = "has";
    commonInit = ["clear", "delete"];
    mapTail = ["get", hasName, "set"];
    mapMethods = commonInit.concat(forEachName, mapTail);
    weakMapMethods = commonInit.concat(mapTail);
    setMethods = ["add"].concat(commonInit, forEachName, hasName);
  }
});

// node_modules/underscore/modules/isMap.js
var isMap_default;
var init_isMap = __esm({
  "node_modules/underscore/modules/isMap.js"() {
    init_tagTester();
    init_stringTagBug();
    init_methodFingerprint();
    isMap_default = isIE11 ? ie11fingerprint(mapMethods) : tagTester("Map");
  }
});

// node_modules/underscore/modules/isWeakMap.js
var isWeakMap_default;
var init_isWeakMap = __esm({
  "node_modules/underscore/modules/isWeakMap.js"() {
    init_tagTester();
    init_stringTagBug();
    init_methodFingerprint();
    isWeakMap_default = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester("WeakMap");
  }
});

// node_modules/underscore/modules/isSet.js
var isSet_default;
var init_isSet = __esm({
  "node_modules/underscore/modules/isSet.js"() {
    init_tagTester();
    init_stringTagBug();
    init_methodFingerprint();
    isSet_default = isIE11 ? ie11fingerprint(setMethods) : tagTester("Set");
  }
});

// node_modules/underscore/modules/isWeakSet.js
var isWeakSet_default;
var init_isWeakSet = __esm({
  "node_modules/underscore/modules/isWeakSet.js"() {
    init_tagTester();
    isWeakSet_default = tagTester("WeakSet");
  }
});

// node_modules/underscore/modules/values.js
function values(obj2) {
  var _keys = keys(obj2);
  var length = _keys.length;
  var values2 = Array(length);
  for (var i = 0; i < length; i++) {
    values2[i] = obj2[_keys[i]];
  }
  return values2;
}
var init_values = __esm({
  "node_modules/underscore/modules/values.js"() {
    init_keys();
  }
});

// node_modules/underscore/modules/pairs.js
function pairs(obj2) {
  var _keys = keys(obj2);
  var length = _keys.length;
  var pairs2 = Array(length);
  for (var i = 0; i < length; i++) {
    pairs2[i] = [_keys[i], obj2[_keys[i]]];
  }
  return pairs2;
}
var init_pairs = __esm({
  "node_modules/underscore/modules/pairs.js"() {
    init_keys();
  }
});

// node_modules/underscore/modules/invert.js
function invert(obj2) {
  var result2 = {};
  var _keys = keys(obj2);
  for (var i = 0, length = _keys.length; i < length; i++) {
    result2[obj2[_keys[i]]] = _keys[i];
  }
  return result2;
}
var init_invert = __esm({
  "node_modules/underscore/modules/invert.js"() {
    init_keys();
  }
});

// node_modules/underscore/modules/functions.js
function functions(obj2) {
  var names = [];
  for (var key2 in obj2) {
    if (isFunction_default(obj2[key2]))
      names.push(key2);
  }
  return names.sort();
}
var init_functions = __esm({
  "node_modules/underscore/modules/functions.js"() {
    init_isFunction();
  }
});

// node_modules/underscore/modules/_createAssigner.js
function createAssigner(keysFunc, defaults) {
  return function(obj2) {
    var length = arguments.length;
    if (defaults)
      obj2 = Object(obj2);
    if (length < 2 || obj2 == null)
      return obj2;
    for (var index = 1; index < length; index++) {
      var source = arguments[index], keys2 = keysFunc(source), l = keys2.length;
      for (var i = 0; i < l; i++) {
        var key2 = keys2[i];
        if (!defaults || obj2[key2] === void 0)
          obj2[key2] = source[key2];
      }
    }
    return obj2;
  };
}
var init_createAssigner = __esm({
  "node_modules/underscore/modules/_createAssigner.js"() {
  }
});

// node_modules/underscore/modules/extend.js
var extend_default;
var init_extend = __esm({
  "node_modules/underscore/modules/extend.js"() {
    init_createAssigner();
    init_allKeys();
    extend_default = createAssigner(allKeys);
  }
});

// node_modules/underscore/modules/extendOwn.js
var extendOwn_default;
var init_extendOwn = __esm({
  "node_modules/underscore/modules/extendOwn.js"() {
    init_createAssigner();
    init_keys();
    extendOwn_default = createAssigner(keys);
  }
});

// node_modules/underscore/modules/defaults.js
var defaults_default;
var init_defaults = __esm({
  "node_modules/underscore/modules/defaults.js"() {
    init_createAssigner();
    init_allKeys();
    defaults_default = createAssigner(allKeys, true);
  }
});

// node_modules/underscore/modules/_baseCreate.js
function ctor() {
  return function() {
  };
}
function baseCreate(prototype) {
  if (!isObject(prototype))
    return {};
  if (nativeCreate)
    return nativeCreate(prototype);
  var Ctor = ctor();
  Ctor.prototype = prototype;
  var result2 = new Ctor();
  Ctor.prototype = null;
  return result2;
}
var init_baseCreate = __esm({
  "node_modules/underscore/modules/_baseCreate.js"() {
    init_isObject();
    init_setup();
  }
});

// node_modules/underscore/modules/create.js
function create(prototype, props2) {
  var result2 = baseCreate(prototype);
  if (props2)
    extendOwn_default(result2, props2);
  return result2;
}
var init_create = __esm({
  "node_modules/underscore/modules/create.js"() {
    init_baseCreate();
    init_extendOwn();
  }
});

// node_modules/underscore/modules/clone.js
function clone(obj2) {
  if (!isObject(obj2))
    return obj2;
  return isArray_default(obj2) ? obj2.slice() : extend_default({}, obj2);
}
var init_clone = __esm({
  "node_modules/underscore/modules/clone.js"() {
    init_isObject();
    init_isArray();
    init_extend();
  }
});

// node_modules/underscore/modules/tap.js
function tap(obj2, interceptor) {
  interceptor(obj2);
  return obj2;
}
var init_tap = __esm({
  "node_modules/underscore/modules/tap.js"() {
  }
});

// node_modules/underscore/modules/toPath.js
function toPath(path) {
  return isArray_default(path) ? path : [path];
}
var init_toPath = __esm({
  "node_modules/underscore/modules/toPath.js"() {
    init_underscore();
    init_isArray();
    _.toPath = toPath;
  }
});

// node_modules/underscore/modules/_toPath.js
function toPath2(path) {
  return _.toPath(path);
}
var init_toPath2 = __esm({
  "node_modules/underscore/modules/_toPath.js"() {
    init_underscore();
    init_toPath();
  }
});

// node_modules/underscore/modules/_deepGet.js
function deepGet(obj2, path) {
  var length = path.length;
  for (var i = 0; i < length; i++) {
    if (obj2 == null)
      return void 0;
    obj2 = obj2[path[i]];
  }
  return length ? obj2 : void 0;
}
var init_deepGet = __esm({
  "node_modules/underscore/modules/_deepGet.js"() {
  }
});

// node_modules/underscore/modules/get.js
function get(object2, path, defaultValue) {
  var value = deepGet(object2, toPath2(path));
  return isUndefined(value) ? defaultValue : value;
}
var init_get = __esm({
  "node_modules/underscore/modules/get.js"() {
    init_toPath2();
    init_deepGet();
    init_isUndefined();
  }
});

// node_modules/underscore/modules/has.js
function has2(obj2, path) {
  path = toPath2(path);
  var length = path.length;
  for (var i = 0; i < length; i++) {
    var key2 = path[i];
    if (!has(obj2, key2))
      return false;
    obj2 = obj2[key2];
  }
  return !!length;
}
var init_has2 = __esm({
  "node_modules/underscore/modules/has.js"() {
    init_has();
    init_toPath2();
  }
});

// node_modules/underscore/modules/identity.js
function identity(value) {
  return value;
}
var init_identity = __esm({
  "node_modules/underscore/modules/identity.js"() {
  }
});

// node_modules/underscore/modules/matcher.js
function matcher(attrs) {
  attrs = extendOwn_default({}, attrs);
  return function(obj2) {
    return isMatch(obj2, attrs);
  };
}
var init_matcher = __esm({
  "node_modules/underscore/modules/matcher.js"() {
    init_extendOwn();
    init_isMatch();
  }
});

// node_modules/underscore/modules/property.js
function property(path) {
  path = toPath2(path);
  return function(obj2) {
    return deepGet(obj2, path);
  };
}
var init_property = __esm({
  "node_modules/underscore/modules/property.js"() {
    init_deepGet();
    init_toPath2();
  }
});

// node_modules/underscore/modules/_optimizeCb.js
function optimizeCb(func, context, argCount) {
  if (context === void 0)
    return func;
  switch (argCount == null ? 3 : argCount) {
    case 1:
      return function(value) {
        return func.call(context, value);
      };
    case 3:
      return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
    case 4:
      return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
  }
  return function() {
    return func.apply(context, arguments);
  };
}
var init_optimizeCb = __esm({
  "node_modules/underscore/modules/_optimizeCb.js"() {
  }
});

// node_modules/underscore/modules/_baseIteratee.js
function baseIteratee(value, context, argCount) {
  if (value == null)
    return identity;
  if (isFunction_default(value))
    return optimizeCb(value, context, argCount);
  if (isObject(value) && !isArray_default(value))
    return matcher(value);
  return property(value);
}
var init_baseIteratee = __esm({
  "node_modules/underscore/modules/_baseIteratee.js"() {
    init_identity();
    init_isFunction();
    init_isObject();
    init_isArray();
    init_matcher();
    init_property();
    init_optimizeCb();
  }
});

// node_modules/underscore/modules/iteratee.js
function iteratee(value, context) {
  return baseIteratee(value, context, Infinity);
}
var init_iteratee = __esm({
  "node_modules/underscore/modules/iteratee.js"() {
    init_underscore();
    init_baseIteratee();
    _.iteratee = iteratee;
  }
});

// node_modules/underscore/modules/_cb.js
function cb(value, context, argCount) {
  if (_.iteratee !== iteratee)
    return _.iteratee(value, context);
  return baseIteratee(value, context, argCount);
}
var init_cb = __esm({
  "node_modules/underscore/modules/_cb.js"() {
    init_underscore();
    init_baseIteratee();
    init_iteratee();
  }
});

// node_modules/underscore/modules/mapObject.js
function mapObject(obj2, iteratee2, context) {
  iteratee2 = cb(iteratee2, context);
  var _keys = keys(obj2), length = _keys.length, results = {};
  for (var index = 0; index < length; index++) {
    var currentKey = _keys[index];
    results[currentKey] = iteratee2(obj2[currentKey], currentKey, obj2);
  }
  return results;
}
var init_mapObject = __esm({
  "node_modules/underscore/modules/mapObject.js"() {
    init_cb();
    init_keys();
  }
});

// node_modules/underscore/modules/noop.js
function noop() {
}
var init_noop = __esm({
  "node_modules/underscore/modules/noop.js"() {
  }
});

// node_modules/underscore/modules/propertyOf.js
function propertyOf(obj2) {
  if (obj2 == null)
    return noop;
  return function(path) {
    return get(obj2, path);
  };
}
var init_propertyOf = __esm({
  "node_modules/underscore/modules/propertyOf.js"() {
    init_noop();
    init_get();
  }
});

// node_modules/underscore/modules/times.js
function times(n, iteratee2, context) {
  var accum = Array(Math.max(0, n));
  iteratee2 = optimizeCb(iteratee2, context, 1);
  for (var i = 0; i < n; i++)
    accum[i] = iteratee2(i);
  return accum;
}
var init_times = __esm({
  "node_modules/underscore/modules/times.js"() {
    init_optimizeCb();
  }
});

// node_modules/underscore/modules/random.js
function random(min2, max2) {
  if (max2 == null) {
    max2 = min2;
    min2 = 0;
  }
  return min2 + Math.floor(Math.random() * (max2 - min2 + 1));
}
var init_random = __esm({
  "node_modules/underscore/modules/random.js"() {
  }
});

// node_modules/underscore/modules/now.js
var now_default;
var init_now = __esm({
  "node_modules/underscore/modules/now.js"() {
    now_default = Date.now || function() {
      return (/* @__PURE__ */ new Date()).getTime();
    };
  }
});

// node_modules/underscore/modules/_createEscaper.js
function createEscaper(map2) {
  var escaper = function(match) {
    return map2[match];
  };
  var source = "(?:" + keys(map2).join("|") + ")";
  var testRegexp = RegExp(source);
  var replaceRegexp = RegExp(source, "g");
  return function(string) {
    string = string == null ? "" : "" + string;
    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
  };
}
var init_createEscaper = __esm({
  "node_modules/underscore/modules/_createEscaper.js"() {
    init_keys();
  }
});

// node_modules/underscore/modules/_escapeMap.js
var escapeMap_default;
var init_escapeMap = __esm({
  "node_modules/underscore/modules/_escapeMap.js"() {
    escapeMap_default = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#x27;",
      "`": "&#x60;"
    };
  }
});

// node_modules/underscore/modules/escape.js
var escape_default;
var init_escape = __esm({
  "node_modules/underscore/modules/escape.js"() {
    init_createEscaper();
    init_escapeMap();
    escape_default = createEscaper(escapeMap_default);
  }
});

// node_modules/underscore/modules/_unescapeMap.js
var unescapeMap_default;
var init_unescapeMap = __esm({
  "node_modules/underscore/modules/_unescapeMap.js"() {
    init_invert();
    init_escapeMap();
    unescapeMap_default = invert(escapeMap_default);
  }
});

// node_modules/underscore/modules/unescape.js
var unescape_default;
var init_unescape = __esm({
  "node_modules/underscore/modules/unescape.js"() {
    init_createEscaper();
    init_unescapeMap();
    unescape_default = createEscaper(unescapeMap_default);
  }
});

// node_modules/underscore/modules/templateSettings.js
var templateSettings_default;
var init_templateSettings = __esm({
  "node_modules/underscore/modules/templateSettings.js"() {
    init_underscore();
    templateSettings_default = _.templateSettings = {
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: /<%=([\s\S]+?)%>/g,
      escape: /<%-([\s\S]+?)%>/g
    };
  }
});

// node_modules/underscore/modules/template.js
function escapeChar(match) {
  return "\\" + escapes[match];
}
function template(text, settings, oldSettings) {
  if (!settings && oldSettings)
    settings = oldSettings;
  settings = defaults_default({}, settings, _.templateSettings);
  var matcher2 = RegExp([
    (settings.escape || noMatch).source,
    (settings.interpolate || noMatch).source,
    (settings.evaluate || noMatch).source
  ].join("|") + "|$", "g");
  var index = 0;
  var source = "__p+='";
  text.replace(matcher2, function(match, escape, interpolate, evaluate, offset) {
    source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
    index = offset + match.length;
    if (escape) {
      source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
    } else if (interpolate) {
      source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
    } else if (evaluate) {
      source += "';\n" + evaluate + "\n__p+='";
    }
    return match;
  });
  source += "';\n";
  var argument = settings.variable;
  if (argument) {
    if (!bareIdentifier.test(argument))
      throw new Error(
        "variable is not a bare identifier: " + argument
      );
  } else {
    source = "with(obj||{}){\n" + source + "}\n";
    argument = "obj";
  }
  source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
  var render;
  try {
    render = new Function(argument, "_", source);
  } catch (e) {
    e.source = source;
    throw e;
  }
  var template2 = function(data) {
    return render.call(this, data, _);
  };
  template2.source = "function(" + argument + "){\n" + source + "}";
  return template2;
}
var noMatch, escapes, escapeRegExp, bareIdentifier;
var init_template = __esm({
  "node_modules/underscore/modules/template.js"() {
    init_defaults();
    init_underscore();
    init_templateSettings();
    noMatch = /(.)^/;
    escapes = {
      "'": "'",
      "\\": "\\",
      "\r": "r",
      "\n": "n",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
    bareIdentifier = /^\s*(\w|\$)+\s*$/;
  }
});

// node_modules/underscore/modules/result.js
function result(obj2, path, fallback) {
  path = toPath2(path);
  var length = path.length;
  if (!length) {
    return isFunction_default(fallback) ? fallback.call(obj2) : fallback;
  }
  for (var i = 0; i < length; i++) {
    var prop = obj2 == null ? void 0 : obj2[path[i]];
    if (prop === void 0) {
      prop = fallback;
      i = length;
    }
    obj2 = isFunction_default(prop) ? prop.call(obj2) : prop;
  }
  return obj2;
}
var init_result = __esm({
  "node_modules/underscore/modules/result.js"() {
    init_isFunction();
    init_toPath2();
  }
});

// node_modules/underscore/modules/uniqueId.js
function uniqueId(prefix2) {
  var id = ++idCounter + "";
  return prefix2 ? prefix2 + id : id;
}
var idCounter;
var init_uniqueId = __esm({
  "node_modules/underscore/modules/uniqueId.js"() {
    idCounter = 0;
  }
});

// node_modules/underscore/modules/chain.js
function chain(obj2) {
  var instance = _(obj2);
  instance._chain = true;
  return instance;
}
var init_chain = __esm({
  "node_modules/underscore/modules/chain.js"() {
    init_underscore();
  }
});

// node_modules/underscore/modules/_executeBound.js
function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
  if (!(callingContext instanceof boundFunc))
    return sourceFunc.apply(context, args);
  var self2 = baseCreate(sourceFunc.prototype);
  var result2 = sourceFunc.apply(self2, args);
  if (isObject(result2))
    return result2;
  return self2;
}
var init_executeBound = __esm({
  "node_modules/underscore/modules/_executeBound.js"() {
    init_baseCreate();
    init_isObject();
  }
});

// node_modules/underscore/modules/partial.js
var partial, partial_default;
var init_partial = __esm({
  "node_modules/underscore/modules/partial.js"() {
    init_restArguments();
    init_executeBound();
    init_underscore();
    partial = restArguments(function(func, boundArgs) {
      var placeholder = partial.placeholder;
      var bound = function() {
        var position = 0, length = boundArgs.length;
        var args = Array(length);
        for (var i = 0; i < length; i++) {
          args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
        }
        while (position < arguments.length)
          args.push(arguments[position++]);
        return executeBound(func, bound, this, this, args);
      };
      return bound;
    });
    partial.placeholder = _;
    partial_default = partial;
  }
});

// node_modules/underscore/modules/bind.js
var bind_default;
var init_bind = __esm({
  "node_modules/underscore/modules/bind.js"() {
    init_restArguments();
    init_isFunction();
    init_executeBound();
    bind_default = restArguments(function(func, context, args) {
      if (!isFunction_default(func))
        throw new TypeError("Bind must be called on a function");
      var bound = restArguments(function(callArgs) {
        return executeBound(func, bound, context, this, args.concat(callArgs));
      });
      return bound;
    });
  }
});

// node_modules/underscore/modules/_isArrayLike.js
var isArrayLike_default;
var init_isArrayLike = __esm({
  "node_modules/underscore/modules/_isArrayLike.js"() {
    init_createSizePropertyCheck();
    init_getLength();
    isArrayLike_default = createSizePropertyCheck(getLength_default);
  }
});

// node_modules/underscore/modules/_flatten.js
function flatten(input, depth, strict, output) {
  output = output || [];
  if (!depth && depth !== 0) {
    depth = Infinity;
  } else if (depth <= 0) {
    return output.concat(input);
  }
  var idx = output.length;
  for (var i = 0, length = getLength_default(input); i < length; i++) {
    var value = input[i];
    if (isArrayLike_default(value) && (isArray_default(value) || isArguments_default(value))) {
      if (depth > 1) {
        flatten(value, depth - 1, strict, output);
        idx = output.length;
      } else {
        var j = 0, len = value.length;
        while (j < len)
          output[idx++] = value[j++];
      }
    } else if (!strict) {
      output[idx++] = value;
    }
  }
  return output;
}
var init_flatten = __esm({
  "node_modules/underscore/modules/_flatten.js"() {
    init_getLength();
    init_isArrayLike();
    init_isArray();
    init_isArguments();
  }
});

// node_modules/underscore/modules/bindAll.js
var bindAll_default;
var init_bindAll = __esm({
  "node_modules/underscore/modules/bindAll.js"() {
    init_restArguments();
    init_flatten();
    init_bind();
    bindAll_default = restArguments(function(obj2, keys2) {
      keys2 = flatten(keys2, false, false);
      var index = keys2.length;
      if (index < 1)
        throw new Error("bindAll must be passed function names");
      while (index--) {
        var key2 = keys2[index];
        obj2[key2] = bind_default(obj2[key2], obj2);
      }
      return obj2;
    });
  }
});

// node_modules/underscore/modules/memoize.js
function memoize(func, hasher) {
  var memoize2 = function(key2) {
    var cache = memoize2.cache;
    var address = "" + (hasher ? hasher.apply(this, arguments) : key2);
    if (!has(cache, address))
      cache[address] = func.apply(this, arguments);
    return cache[address];
  };
  memoize2.cache = {};
  return memoize2;
}
var init_memoize = __esm({
  "node_modules/underscore/modules/memoize.js"() {
    init_has();
  }
});

// node_modules/underscore/modules/delay.js
var delay_default;
var init_delay = __esm({
  "node_modules/underscore/modules/delay.js"() {
    init_restArguments();
    delay_default = restArguments(function(func, wait, args) {
      return setTimeout(function() {
        return func.apply(null, args);
      }, wait);
    });
  }
});

// node_modules/underscore/modules/defer.js
var defer_default;
var init_defer = __esm({
  "node_modules/underscore/modules/defer.js"() {
    init_partial();
    init_delay();
    init_underscore();
    defer_default = partial_default(delay_default, _, 1);
  }
});

// node_modules/underscore/modules/throttle.js
function throttle(func, wait, options) {
  var timeout, context, args, result2;
  var previous = 0;
  if (!options)
    options = {};
  var later = function() {
    previous = options.leading === false ? 0 : now_default();
    timeout = null;
    result2 = func.apply(context, args);
    if (!timeout)
      context = args = null;
  };
  var throttled = function() {
    var _now = now_default();
    if (!previous && options.leading === false)
      previous = _now;
    var remaining = wait - (_now - previous);
    context = this;
    args = arguments;
    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
      previous = _now;
      result2 = func.apply(context, args);
      if (!timeout)
        context = args = null;
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }
    return result2;
  };
  throttled.cancel = function() {
    clearTimeout(timeout);
    previous = 0;
    timeout = context = args = null;
  };
  return throttled;
}
var init_throttle = __esm({
  "node_modules/underscore/modules/throttle.js"() {
    init_now();
  }
});

// node_modules/underscore/modules/debounce.js
function debounce(func, wait, immediate) {
  var timeout, previous, args, result2, context;
  var later = function() {
    var passed = now_default() - previous;
    if (wait > passed) {
      timeout = setTimeout(later, wait - passed);
    } else {
      timeout = null;
      if (!immediate)
        result2 = func.apply(context, args);
      if (!timeout)
        args = context = null;
    }
  };
  var debounced = restArguments(function(_args) {
    context = this;
    args = _args;
    previous = now_default();
    if (!timeout) {
      timeout = setTimeout(later, wait);
      if (immediate)
        result2 = func.apply(context, args);
    }
    return result2;
  });
  debounced.cancel = function() {
    clearTimeout(timeout);
    timeout = args = context = null;
  };
  return debounced;
}
var init_debounce = __esm({
  "node_modules/underscore/modules/debounce.js"() {
    init_restArguments();
    init_now();
  }
});

// node_modules/underscore/modules/wrap.js
function wrap(func, wrapper) {
  return partial_default(wrapper, func);
}
var init_wrap = __esm({
  "node_modules/underscore/modules/wrap.js"() {
    init_partial();
  }
});

// node_modules/underscore/modules/negate.js
function negate(predicate) {
  return function() {
    return !predicate.apply(this, arguments);
  };
}
var init_negate = __esm({
  "node_modules/underscore/modules/negate.js"() {
  }
});

// node_modules/underscore/modules/compose.js
function compose() {
  var args = arguments;
  var start = args.length - 1;
  return function() {
    var i = start;
    var result2 = args[start].apply(this, arguments);
    while (i--)
      result2 = args[i].call(this, result2);
    return result2;
  };
}
var init_compose = __esm({
  "node_modules/underscore/modules/compose.js"() {
  }
});

// node_modules/underscore/modules/after.js
function after(times2, func) {
  return function() {
    if (--times2 < 1) {
      return func.apply(this, arguments);
    }
  };
}
var init_after = __esm({
  "node_modules/underscore/modules/after.js"() {
  }
});

// node_modules/underscore/modules/before.js
function before(times2, func) {
  var memo;
  return function() {
    if (--times2 > 0) {
      memo = func.apply(this, arguments);
    }
    if (times2 <= 1)
      func = null;
    return memo;
  };
}
var init_before = __esm({
  "node_modules/underscore/modules/before.js"() {
  }
});

// node_modules/underscore/modules/once.js
var once_default;
var init_once = __esm({
  "node_modules/underscore/modules/once.js"() {
    init_partial();
    init_before();
    once_default = partial_default(before, 2);
  }
});

// node_modules/underscore/modules/findKey.js
function findKey(obj2, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = keys(obj2), key2;
  for (var i = 0, length = _keys.length; i < length; i++) {
    key2 = _keys[i];
    if (predicate(obj2[key2], key2, obj2))
      return key2;
  }
}
var init_findKey = __esm({
  "node_modules/underscore/modules/findKey.js"() {
    init_cb();
    init_keys();
  }
});

// node_modules/underscore/modules/_createPredicateIndexFinder.js
function createPredicateIndexFinder(dir) {
  return function(array, predicate, context) {
    predicate = cb(predicate, context);
    var length = getLength_default(array);
    var index = dir > 0 ? 0 : length - 1;
    for (; index >= 0 && index < length; index += dir) {
      if (predicate(array[index], index, array))
        return index;
    }
    return -1;
  };
}
var init_createPredicateIndexFinder = __esm({
  "node_modules/underscore/modules/_createPredicateIndexFinder.js"() {
    init_cb();
    init_getLength();
  }
});

// node_modules/underscore/modules/findIndex.js
var findIndex_default;
var init_findIndex = __esm({
  "node_modules/underscore/modules/findIndex.js"() {
    init_createPredicateIndexFinder();
    findIndex_default = createPredicateIndexFinder(1);
  }
});

// node_modules/underscore/modules/findLastIndex.js
var findLastIndex_default;
var init_findLastIndex = __esm({
  "node_modules/underscore/modules/findLastIndex.js"() {
    init_createPredicateIndexFinder();
    findLastIndex_default = createPredicateIndexFinder(-1);
  }
});

// node_modules/underscore/modules/sortedIndex.js
function sortedIndex(array, obj2, iteratee2, context) {
  iteratee2 = cb(iteratee2, context, 1);
  var value = iteratee2(obj2);
  var low = 0, high = getLength_default(array);
  while (low < high) {
    var mid = Math.floor((low + high) / 2);
    if (iteratee2(array[mid]) < value)
      low = mid + 1;
    else
      high = mid;
  }
  return low;
}
var init_sortedIndex = __esm({
  "node_modules/underscore/modules/sortedIndex.js"() {
    init_cb();
    init_getLength();
  }
});

// node_modules/underscore/modules/_createIndexFinder.js
function createIndexFinder(dir, predicateFind, sortedIndex2) {
  return function(array, item, idx) {
    var i = 0, length = getLength_default(array);
    if (typeof idx == "number") {
      if (dir > 0) {
        i = idx >= 0 ? idx : Math.max(idx + length, i);
      } else {
        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
      }
    } else if (sortedIndex2 && idx && length) {
      idx = sortedIndex2(array, item);
      return array[idx] === item ? idx : -1;
    }
    if (item !== item) {
      idx = predicateFind(slice.call(array, i, length), isNaN2);
      return idx >= 0 ? idx + i : -1;
    }
    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
      if (array[idx] === item)
        return idx;
    }
    return -1;
  };
}
var init_createIndexFinder = __esm({
  "node_modules/underscore/modules/_createIndexFinder.js"() {
    init_getLength();
    init_setup();
    init_isNaN();
  }
});

// node_modules/underscore/modules/indexOf.js
var indexOf_default;
var init_indexOf = __esm({
  "node_modules/underscore/modules/indexOf.js"() {
    init_sortedIndex();
    init_findIndex();
    init_createIndexFinder();
    indexOf_default = createIndexFinder(1, findIndex_default, sortedIndex);
  }
});

// node_modules/underscore/modules/lastIndexOf.js
var lastIndexOf_default;
var init_lastIndexOf = __esm({
  "node_modules/underscore/modules/lastIndexOf.js"() {
    init_findLastIndex();
    init_createIndexFinder();
    lastIndexOf_default = createIndexFinder(-1, findLastIndex_default);
  }
});

// node_modules/underscore/modules/find.js
function find(obj2, predicate, context) {
  var keyFinder = isArrayLike_default(obj2) ? findIndex_default : findKey;
  var key2 = keyFinder(obj2, predicate, context);
  if (key2 !== void 0 && key2 !== -1)
    return obj2[key2];
}
var init_find = __esm({
  "node_modules/underscore/modules/find.js"() {
    init_isArrayLike();
    init_findIndex();
    init_findKey();
  }
});

// node_modules/underscore/modules/findWhere.js
function findWhere(obj2, attrs) {
  return find(obj2, matcher(attrs));
}
var init_findWhere = __esm({
  "node_modules/underscore/modules/findWhere.js"() {
    init_find();
    init_matcher();
  }
});

// node_modules/underscore/modules/each.js
function each(obj2, iteratee2, context) {
  iteratee2 = optimizeCb(iteratee2, context);
  var i, length;
  if (isArrayLike_default(obj2)) {
    for (i = 0, length = obj2.length; i < length; i++) {
      iteratee2(obj2[i], i, obj2);
    }
  } else {
    var _keys = keys(obj2);
    for (i = 0, length = _keys.length; i < length; i++) {
      iteratee2(obj2[_keys[i]], _keys[i], obj2);
    }
  }
  return obj2;
}
var init_each = __esm({
  "node_modules/underscore/modules/each.js"() {
    init_optimizeCb();
    init_isArrayLike();
    init_keys();
  }
});

// node_modules/underscore/modules/map.js
function map(obj2, iteratee2, context) {
  iteratee2 = cb(iteratee2, context);
  var _keys = !isArrayLike_default(obj2) && keys(obj2), length = (_keys || obj2).length, results = Array(length);
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    results[index] = iteratee2(obj2[currentKey], currentKey, obj2);
  }
  return results;
}
var init_map = __esm({
  "node_modules/underscore/modules/map.js"() {
    init_cb();
    init_isArrayLike();
    init_keys();
  }
});

// node_modules/underscore/modules/_createReduce.js
function createReduce(dir) {
  var reducer = function(obj2, iteratee2, memo, initial2) {
    var _keys = !isArrayLike_default(obj2) && keys(obj2), length = (_keys || obj2).length, index = dir > 0 ? 0 : length - 1;
    if (!initial2) {
      memo = obj2[_keys ? _keys[index] : index];
      index += dir;
    }
    for (; index >= 0 && index < length; index += dir) {
      var currentKey = _keys ? _keys[index] : index;
      memo = iteratee2(memo, obj2[currentKey], currentKey, obj2);
    }
    return memo;
  };
  return function(obj2, iteratee2, memo, context) {
    var initial2 = arguments.length >= 3;
    return reducer(obj2, optimizeCb(iteratee2, context, 4), memo, initial2);
  };
}
var init_createReduce = __esm({
  "node_modules/underscore/modules/_createReduce.js"() {
    init_isArrayLike();
    init_keys();
    init_optimizeCb();
  }
});

// node_modules/underscore/modules/reduce.js
var reduce_default;
var init_reduce = __esm({
  "node_modules/underscore/modules/reduce.js"() {
    init_createReduce();
    reduce_default = createReduce(1);
  }
});

// node_modules/underscore/modules/reduceRight.js
var reduceRight_default;
var init_reduceRight = __esm({
  "node_modules/underscore/modules/reduceRight.js"() {
    init_createReduce();
    reduceRight_default = createReduce(-1);
  }
});

// node_modules/underscore/modules/filter.js
function filter(obj2, predicate, context) {
  var results = [];
  predicate = cb(predicate, context);
  each(obj2, function(value, index, list) {
    if (predicate(value, index, list))
      results.push(value);
  });
  return results;
}
var init_filter = __esm({
  "node_modules/underscore/modules/filter.js"() {
    init_cb();
    init_each();
  }
});

// node_modules/underscore/modules/reject.js
function reject(obj2, predicate, context) {
  return filter(obj2, negate(cb(predicate)), context);
}
var init_reject = __esm({
  "node_modules/underscore/modules/reject.js"() {
    init_filter();
    init_negate();
    init_cb();
  }
});

// node_modules/underscore/modules/every.js
function every(obj2, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = !isArrayLike_default(obj2) && keys(obj2), length = (_keys || obj2).length;
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    if (!predicate(obj2[currentKey], currentKey, obj2))
      return false;
  }
  return true;
}
var init_every = __esm({
  "node_modules/underscore/modules/every.js"() {
    init_cb();
    init_isArrayLike();
    init_keys();
  }
});

// node_modules/underscore/modules/some.js
function some(obj2, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = !isArrayLike_default(obj2) && keys(obj2), length = (_keys || obj2).length;
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    if (predicate(obj2[currentKey], currentKey, obj2))
      return true;
  }
  return false;
}
var init_some = __esm({
  "node_modules/underscore/modules/some.js"() {
    init_cb();
    init_isArrayLike();
    init_keys();
  }
});

// node_modules/underscore/modules/contains.js
function contains(obj2, item, fromIndex, guard) {
  if (!isArrayLike_default(obj2))
    obj2 = values(obj2);
  if (typeof fromIndex != "number" || guard)
    fromIndex = 0;
  return indexOf_default(obj2, item, fromIndex) >= 0;
}
var init_contains = __esm({
  "node_modules/underscore/modules/contains.js"() {
    init_isArrayLike();
    init_values();
    init_indexOf();
  }
});

// node_modules/underscore/modules/invoke.js
var invoke_default;
var init_invoke = __esm({
  "node_modules/underscore/modules/invoke.js"() {
    init_restArguments();
    init_isFunction();
    init_map();
    init_deepGet();
    init_toPath2();
    invoke_default = restArguments(function(obj2, path, args) {
      var contextPath, func;
      if (isFunction_default(path)) {
        func = path;
      } else {
        path = toPath2(path);
        contextPath = path.slice(0, -1);
        path = path[path.length - 1];
      }
      return map(obj2, function(context) {
        var method = func;
        if (!method) {
          if (contextPath && contextPath.length) {
            context = deepGet(context, contextPath);
          }
          if (context == null)
            return void 0;
          method = context[path];
        }
        return method == null ? method : method.apply(context, args);
      });
    });
  }
});

// node_modules/underscore/modules/pluck.js
function pluck(obj2, key2) {
  return map(obj2, property(key2));
}
var init_pluck = __esm({
  "node_modules/underscore/modules/pluck.js"() {
    init_map();
    init_property();
  }
});

// node_modules/underscore/modules/where.js
function where(obj2, attrs) {
  return filter(obj2, matcher(attrs));
}
var init_where = __esm({
  "node_modules/underscore/modules/where.js"() {
    init_filter();
    init_matcher();
  }
});

// node_modules/underscore/modules/max.js
function max(obj2, iteratee2, context) {
  var result2 = -Infinity, lastComputed = -Infinity, value, computed;
  if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj2[0] != "object" && obj2 != null) {
    obj2 = isArrayLike_default(obj2) ? obj2 : values(obj2);
    for (var i = 0, length = obj2.length; i < length; i++) {
      value = obj2[i];
      if (value != null && value > result2) {
        result2 = value;
      }
    }
  } else {
    iteratee2 = cb(iteratee2, context);
    each(obj2, function(v2, index, list) {
      computed = iteratee2(v2, index, list);
      if (computed > lastComputed || computed === -Infinity && result2 === -Infinity) {
        result2 = v2;
        lastComputed = computed;
      }
    });
  }
  return result2;
}
var init_max = __esm({
  "node_modules/underscore/modules/max.js"() {
    init_isArrayLike();
    init_values();
    init_cb();
    init_each();
  }
});

// node_modules/underscore/modules/min.js
function min(obj2, iteratee2, context) {
  var result2 = Infinity, lastComputed = Infinity, value, computed;
  if (iteratee2 == null || typeof iteratee2 == "number" && typeof obj2[0] != "object" && obj2 != null) {
    obj2 = isArrayLike_default(obj2) ? obj2 : values(obj2);
    for (var i = 0, length = obj2.length; i < length; i++) {
      value = obj2[i];
      if (value != null && value < result2) {
        result2 = value;
      }
    }
  } else {
    iteratee2 = cb(iteratee2, context);
    each(obj2, function(v2, index, list) {
      computed = iteratee2(v2, index, list);
      if (computed < lastComputed || computed === Infinity && result2 === Infinity) {
        result2 = v2;
        lastComputed = computed;
      }
    });
  }
  return result2;
}
var init_min = __esm({
  "node_modules/underscore/modules/min.js"() {
    init_isArrayLike();
    init_values();
    init_cb();
    init_each();
  }
});

// node_modules/underscore/modules/toArray.js
function toArray(obj2) {
  if (!obj2)
    return [];
  if (isArray_default(obj2))
    return slice.call(obj2);
  if (isString_default(obj2)) {
    return obj2.match(reStrSymbol);
  }
  if (isArrayLike_default(obj2))
    return map(obj2, identity);
  return values(obj2);
}
var reStrSymbol;
var init_toArray = __esm({
  "node_modules/underscore/modules/toArray.js"() {
    init_isArray();
    init_setup();
    init_isString();
    init_isArrayLike();
    init_map();
    init_identity();
    init_values();
    reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  }
});

// node_modules/underscore/modules/sample.js
function sample(obj2, n, guard) {
  if (n == null || guard) {
    if (!isArrayLike_default(obj2))
      obj2 = values(obj2);
    return obj2[random(obj2.length - 1)];
  }
  var sample2 = toArray(obj2);
  var length = getLength_default(sample2);
  n = Math.max(Math.min(n, length), 0);
  var last2 = length - 1;
  for (var index = 0; index < n; index++) {
    var rand = random(index, last2);
    var temp = sample2[index];
    sample2[index] = sample2[rand];
    sample2[rand] = temp;
  }
  return sample2.slice(0, n);
}
var init_sample = __esm({
  "node_modules/underscore/modules/sample.js"() {
    init_isArrayLike();
    init_values();
    init_getLength();
    init_random();
    init_toArray();
  }
});

// node_modules/underscore/modules/shuffle.js
function shuffle(obj2) {
  return sample(obj2, Infinity);
}
var init_shuffle = __esm({
  "node_modules/underscore/modules/shuffle.js"() {
    init_sample();
  }
});

// node_modules/underscore/modules/sortBy.js
function sortBy(obj2, iteratee2, context) {
  var index = 0;
  iteratee2 = cb(iteratee2, context);
  return pluck(map(obj2, function(value, key2, list) {
    return {
      value,
      index: index++,
      criteria: iteratee2(value, key2, list)
    };
  }).sort(function(left, right) {
    var a = left.criteria;
    var b = right.criteria;
    if (a !== b) {
      if (a > b || a === void 0)
        return 1;
      if (a < b || b === void 0)
        return -1;
    }
    return left.index - right.index;
  }), "value");
}
var init_sortBy = __esm({
  "node_modules/underscore/modules/sortBy.js"() {
    init_cb();
    init_pluck();
    init_map();
  }
});

// node_modules/underscore/modules/_group.js
function group(behavior, partition) {
  return function(obj2, iteratee2, context) {
    var result2 = partition ? [[], []] : {};
    iteratee2 = cb(iteratee2, context);
    each(obj2, function(value, index) {
      var key2 = iteratee2(value, index, obj2);
      behavior(result2, value, key2);
    });
    return result2;
  };
}
var init_group = __esm({
  "node_modules/underscore/modules/_group.js"() {
    init_cb();
    init_each();
  }
});

// node_modules/underscore/modules/groupBy.js
var groupBy_default;
var init_groupBy = __esm({
  "node_modules/underscore/modules/groupBy.js"() {
    init_group();
    init_has();
    groupBy_default = group(function(result2, value, key2) {
      if (has(result2, key2))
        result2[key2].push(value);
      else
        result2[key2] = [value];
    });
  }
});

// node_modules/underscore/modules/indexBy.js
var indexBy_default;
var init_indexBy = __esm({
  "node_modules/underscore/modules/indexBy.js"() {
    init_group();
    indexBy_default = group(function(result2, value, key2) {
      result2[key2] = value;
    });
  }
});

// node_modules/underscore/modules/countBy.js
var countBy_default;
var init_countBy = __esm({
  "node_modules/underscore/modules/countBy.js"() {
    init_group();
    init_has();
    countBy_default = group(function(result2, value, key2) {
      if (has(result2, key2))
        result2[key2]++;
      else
        result2[key2] = 1;
    });
  }
});

// node_modules/underscore/modules/partition.js
var partition_default;
var init_partition = __esm({
  "node_modules/underscore/modules/partition.js"() {
    init_group();
    partition_default = group(function(result2, value, pass) {
      result2[pass ? 0 : 1].push(value);
    }, true);
  }
});

// node_modules/underscore/modules/size.js
function size(obj2) {
  if (obj2 == null)
    return 0;
  return isArrayLike_default(obj2) ? obj2.length : keys(obj2).length;
}
var init_size = __esm({
  "node_modules/underscore/modules/size.js"() {
    init_isArrayLike();
    init_keys();
  }
});

// node_modules/underscore/modules/_keyInObj.js
function keyInObj(value, key2, obj2) {
  return key2 in obj2;
}
var init_keyInObj = __esm({
  "node_modules/underscore/modules/_keyInObj.js"() {
  }
});

// node_modules/underscore/modules/pick.js
var pick_default;
var init_pick = __esm({
  "node_modules/underscore/modules/pick.js"() {
    init_restArguments();
    init_isFunction();
    init_optimizeCb();
    init_allKeys();
    init_keyInObj();
    init_flatten();
    pick_default = restArguments(function(obj2, keys2) {
      var result2 = {}, iteratee2 = keys2[0];
      if (obj2 == null)
        return result2;
      if (isFunction_default(iteratee2)) {
        if (keys2.length > 1)
          iteratee2 = optimizeCb(iteratee2, keys2[1]);
        keys2 = allKeys(obj2);
      } else {
        iteratee2 = keyInObj;
        keys2 = flatten(keys2, false, false);
        obj2 = Object(obj2);
      }
      for (var i = 0, length = keys2.length; i < length; i++) {
        var key2 = keys2[i];
        var value = obj2[key2];
        if (iteratee2(value, key2, obj2))
          result2[key2] = value;
      }
      return result2;
    });
  }
});

// node_modules/underscore/modules/omit.js
var omit_default;
var init_omit = __esm({
  "node_modules/underscore/modules/omit.js"() {
    init_restArguments();
    init_isFunction();
    init_negate();
    init_map();
    init_flatten();
    init_contains();
    init_pick();
    omit_default = restArguments(function(obj2, keys2) {
      var iteratee2 = keys2[0], context;
      if (isFunction_default(iteratee2)) {
        iteratee2 = negate(iteratee2);
        if (keys2.length > 1)
          context = keys2[1];
      } else {
        keys2 = map(flatten(keys2, false, false), String);
        iteratee2 = function(value, key2) {
          return !contains(keys2, key2);
        };
      }
      return pick_default(obj2, iteratee2, context);
    });
  }
});

// node_modules/underscore/modules/initial.js
function initial(array, n, guard) {
  return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
}
var init_initial = __esm({
  "node_modules/underscore/modules/initial.js"() {
    init_setup();
  }
});

// node_modules/underscore/modules/first.js
function first(array, n, guard) {
  if (array == null || array.length < 1)
    return n == null || guard ? void 0 : [];
  if (n == null || guard)
    return array[0];
  return initial(array, array.length - n);
}
var init_first = __esm({
  "node_modules/underscore/modules/first.js"() {
    init_initial();
  }
});

// node_modules/underscore/modules/rest.js
function rest(array, n, guard) {
  return slice.call(array, n == null || guard ? 1 : n);
}
var init_rest = __esm({
  "node_modules/underscore/modules/rest.js"() {
    init_setup();
  }
});

// node_modules/underscore/modules/last.js
function last(array, n, guard) {
  if (array == null || array.length < 1)
    return n == null || guard ? void 0 : [];
  if (n == null || guard)
    return array[array.length - 1];
  return rest(array, Math.max(0, array.length - n));
}
var init_last = __esm({
  "node_modules/underscore/modules/last.js"() {
    init_rest();
  }
});

// node_modules/underscore/modules/compact.js
function compact(array) {
  return filter(array, Boolean);
}
var init_compact = __esm({
  "node_modules/underscore/modules/compact.js"() {
    init_filter();
  }
});

// node_modules/underscore/modules/flatten.js
function flatten2(array, depth) {
  return flatten(array, depth, false);
}
var init_flatten2 = __esm({
  "node_modules/underscore/modules/flatten.js"() {
    init_flatten();
  }
});

// node_modules/underscore/modules/difference.js
var difference_default;
var init_difference = __esm({
  "node_modules/underscore/modules/difference.js"() {
    init_restArguments();
    init_flatten();
    init_filter();
    init_contains();
    difference_default = restArguments(function(array, rest2) {
      rest2 = flatten(rest2, true, true);
      return filter(array, function(value) {
        return !contains(rest2, value);
      });
    });
  }
});

// node_modules/underscore/modules/without.js
var without_default;
var init_without = __esm({
  "node_modules/underscore/modules/without.js"() {
    init_restArguments();
    init_difference();
    without_default = restArguments(function(array, otherArrays) {
      return difference_default(array, otherArrays);
    });
  }
});

// node_modules/underscore/modules/uniq.js
function uniq(array, isSorted, iteratee2, context) {
  if (!isBoolean(isSorted)) {
    context = iteratee2;
    iteratee2 = isSorted;
    isSorted = false;
  }
  if (iteratee2 != null)
    iteratee2 = cb(iteratee2, context);
  var result2 = [];
  var seen = [];
  for (var i = 0, length = getLength_default(array); i < length; i++) {
    var value = array[i], computed = iteratee2 ? iteratee2(value, i, array) : value;
    if (isSorted && !iteratee2) {
      if (!i || seen !== computed)
        result2.push(value);
      seen = computed;
    } else if (iteratee2) {
      if (!contains(seen, computed)) {
        seen.push(computed);
        result2.push(value);
      }
    } else if (!contains(result2, value)) {
      result2.push(value);
    }
  }
  return result2;
}
var init_uniq = __esm({
  "node_modules/underscore/modules/uniq.js"() {
    init_isBoolean();
    init_cb();
    init_getLength();
    init_contains();
  }
});

// node_modules/underscore/modules/union.js
var union_default;
var init_union = __esm({
  "node_modules/underscore/modules/union.js"() {
    init_restArguments();
    init_uniq();
    init_flatten();
    union_default = restArguments(function(arrays) {
      return uniq(flatten(arrays, true, true));
    });
  }
});

// node_modules/underscore/modules/intersection.js
function intersection(array) {
  var result2 = [];
  var argsLength = arguments.length;
  for (var i = 0, length = getLength_default(array); i < length; i++) {
    var item = array[i];
    if (contains(result2, item))
      continue;
    var j;
    for (j = 1; j < argsLength; j++) {
      if (!contains(arguments[j], item))
        break;
    }
    if (j === argsLength)
      result2.push(item);
  }
  return result2;
}
var init_intersection = __esm({
  "node_modules/underscore/modules/intersection.js"() {
    init_getLength();
    init_contains();
  }
});

// node_modules/underscore/modules/unzip.js
function unzip(array) {
  var length = array && max(array, getLength_default).length || 0;
  var result2 = Array(length);
  for (var index = 0; index < length; index++) {
    result2[index] = pluck(array, index);
  }
  return result2;
}
var init_unzip = __esm({
  "node_modules/underscore/modules/unzip.js"() {
    init_max();
    init_getLength();
    init_pluck();
  }
});

// node_modules/underscore/modules/zip.js
var zip_default;
var init_zip = __esm({
  "node_modules/underscore/modules/zip.js"() {
    init_restArguments();
    init_unzip();
    zip_default = restArguments(unzip);
  }
});

// node_modules/underscore/modules/object.js
function object(list, values2) {
  var result2 = {};
  for (var i = 0, length = getLength_default(list); i < length; i++) {
    if (values2) {
      result2[list[i]] = values2[i];
    } else {
      result2[list[i][0]] = list[i][1];
    }
  }
  return result2;
}
var init_object = __esm({
  "node_modules/underscore/modules/object.js"() {
    init_getLength();
  }
});

// node_modules/underscore/modules/range.js
function range(start, stop, step) {
  if (stop == null) {
    stop = start || 0;
    start = 0;
  }
  if (!step) {
    step = stop < start ? -1 : 1;
  }
  var length = Math.max(Math.ceil((stop - start) / step), 0);
  var range2 = Array(length);
  for (var idx = 0; idx < length; idx++, start += step) {
    range2[idx] = start;
  }
  return range2;
}
var init_range = __esm({
  "node_modules/underscore/modules/range.js"() {
  }
});

// node_modules/underscore/modules/chunk.js
function chunk(array, count) {
  if (count == null || count < 1)
    return [];
  var result2 = [];
  var i = 0, length = array.length;
  while (i < length) {
    result2.push(slice.call(array, i, i += count));
  }
  return result2;
}
var init_chunk = __esm({
  "node_modules/underscore/modules/chunk.js"() {
    init_setup();
  }
});

// node_modules/underscore/modules/_chainResult.js
function chainResult(instance, obj2) {
  return instance._chain ? _(obj2).chain() : obj2;
}
var init_chainResult = __esm({
  "node_modules/underscore/modules/_chainResult.js"() {
    init_underscore();
  }
});

// node_modules/underscore/modules/mixin.js
function mixin(obj2) {
  each(functions(obj2), function(name) {
    var func = _[name] = obj2[name];
    _.prototype[name] = function() {
      var args = [this._wrapped];
      push.apply(args, arguments);
      return chainResult(this, func.apply(_, args));
    };
  });
  return _;
}
var init_mixin = __esm({
  "node_modules/underscore/modules/mixin.js"() {
    init_underscore();
    init_each();
    init_functions();
    init_setup();
    init_chainResult();
  }
});

// node_modules/underscore/modules/underscore-array-methods.js
var underscore_array_methods_default;
var init_underscore_array_methods = __esm({
  "node_modules/underscore/modules/underscore-array-methods.js"() {
    init_underscore();
    init_each();
    init_setup();
    init_chainResult();
    each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
      var method = ArrayProto[name];
      _.prototype[name] = function() {
        var obj2 = this._wrapped;
        if (obj2 != null) {
          method.apply(obj2, arguments);
          if ((name === "shift" || name === "splice") && obj2.length === 0) {
            delete obj2[0];
          }
        }
        return chainResult(this, obj2);
      };
    });
    each(["concat", "join", "slice"], function(name) {
      var method = ArrayProto[name];
      _.prototype[name] = function() {
        var obj2 = this._wrapped;
        if (obj2 != null)
          obj2 = method.apply(obj2, arguments);
        return chainResult(this, obj2);
      };
    });
    underscore_array_methods_default = _;
  }
});

// node_modules/underscore/modules/index.js
var modules_exports = {};
__export(modules_exports, {
  VERSION: () => VERSION,
  after: () => after,
  all: () => every,
  allKeys: () => allKeys,
  any: () => some,
  assign: () => extendOwn_default,
  before: () => before,
  bind: () => bind_default,
  bindAll: () => bindAll_default,
  chain: () => chain,
  chunk: () => chunk,
  clone: () => clone,
  collect: () => map,
  compact: () => compact,
  compose: () => compose,
  constant: () => constant,
  contains: () => contains,
  countBy: () => countBy_default,
  create: () => create,
  debounce: () => debounce,
  default: () => underscore_array_methods_default,
  defaults: () => defaults_default,
  defer: () => defer_default,
  delay: () => delay_default,
  detect: () => find,
  difference: () => difference_default,
  drop: () => rest,
  each: () => each,
  escape: () => escape_default,
  every: () => every,
  extend: () => extend_default,
  extendOwn: () => extendOwn_default,
  filter: () => filter,
  find: () => find,
  findIndex: () => findIndex_default,
  findKey: () => findKey,
  findLastIndex: () => findLastIndex_default,
  findWhere: () => findWhere,
  first: () => first,
  flatten: () => flatten2,
  foldl: () => reduce_default,
  foldr: () => reduceRight_default,
  forEach: () => each,
  functions: () => functions,
  get: () => get,
  groupBy: () => groupBy_default,
  has: () => has2,
  head: () => first,
  identity: () => identity,
  include: () => contains,
  includes: () => contains,
  indexBy: () => indexBy_default,
  indexOf: () => indexOf_default,
  initial: () => initial,
  inject: () => reduce_default,
  intersection: () => intersection,
  invert: () => invert,
  invoke: () => invoke_default,
  isArguments: () => isArguments_default,
  isArray: () => isArray_default,
  isArrayBuffer: () => isArrayBuffer_default,
  isBoolean: () => isBoolean,
  isDataView: () => isDataView_default,
  isDate: () => isDate_default,
  isElement: () => isElement,
  isEmpty: () => isEmpty,
  isEqual: () => isEqual,
  isError: () => isError_default,
  isFinite: () => isFinite2,
  isFunction: () => isFunction_default,
  isMap: () => isMap_default,
  isMatch: () => isMatch,
  isNaN: () => isNaN2,
  isNull: () => isNull,
  isNumber: () => isNumber_default,
  isObject: () => isObject,
  isRegExp: () => isRegExp_default,
  isSet: () => isSet_default,
  isString: () => isString_default,
  isSymbol: () => isSymbol_default,
  isTypedArray: () => isTypedArray_default,
  isUndefined: () => isUndefined,
  isWeakMap: () => isWeakMap_default,
  isWeakSet: () => isWeakSet_default,
  iteratee: () => iteratee,
  keys: () => keys,
  last: () => last,
  lastIndexOf: () => lastIndexOf_default,
  map: () => map,
  mapObject: () => mapObject,
  matcher: () => matcher,
  matches: () => matcher,
  max: () => max,
  memoize: () => memoize,
  methods: () => functions,
  min: () => min,
  mixin: () => mixin,
  negate: () => negate,
  noop: () => noop,
  now: () => now_default,
  object: () => object,
  omit: () => omit_default,
  once: () => once_default,
  pairs: () => pairs,
  partial: () => partial_default,
  partition: () => partition_default,
  pick: () => pick_default,
  pluck: () => pluck,
  property: () => property,
  propertyOf: () => propertyOf,
  random: () => random,
  range: () => range,
  reduce: () => reduce_default,
  reduceRight: () => reduceRight_default,
  reject: () => reject,
  rest: () => rest,
  restArguments: () => restArguments,
  result: () => result,
  sample: () => sample,
  select: () => filter,
  shuffle: () => shuffle,
  size: () => size,
  some: () => some,
  sortBy: () => sortBy,
  sortedIndex: () => sortedIndex,
  tail: () => rest,
  take: () => first,
  tap: () => tap,
  template: () => template,
  templateSettings: () => templateSettings_default,
  throttle: () => throttle,
  times: () => times,
  toArray: () => toArray,
  toPath: () => toPath,
  transpose: () => unzip,
  unescape: () => unescape_default,
  union: () => union_default,
  uniq: () => uniq,
  unique: () => uniq,
  uniqueId: () => uniqueId,
  unzip: () => unzip,
  values: () => values,
  where: () => where,
  without: () => without_default,
  wrap: () => wrap,
  zip: () => zip_default
});
var init_modules = __esm({
  "node_modules/underscore/modules/index.js"() {
    init_setup();
    init_restArguments();
    init_isObject();
    init_isNull();
    init_isUndefined();
    init_isBoolean();
    init_isElement();
    init_isString();
    init_isNumber();
    init_isDate();
    init_isRegExp();
    init_isError();
    init_isSymbol();
    init_isArrayBuffer();
    init_isDataView();
    init_isArray();
    init_isFunction();
    init_isArguments();
    init_isFinite();
    init_isNaN();
    init_isTypedArray();
    init_isEmpty();
    init_isMatch();
    init_isEqual();
    init_isMap();
    init_isWeakMap();
    init_isSet();
    init_isWeakSet();
    init_keys();
    init_allKeys();
    init_values();
    init_pairs();
    init_invert();
    init_functions();
    init_extend();
    init_extendOwn();
    init_defaults();
    init_create();
    init_clone();
    init_tap();
    init_get();
    init_has2();
    init_mapObject();
    init_identity();
    init_constant();
    init_noop();
    init_toPath();
    init_property();
    init_propertyOf();
    init_matcher();
    init_times();
    init_random();
    init_now();
    init_escape();
    init_unescape();
    init_templateSettings();
    init_template();
    init_result();
    init_uniqueId();
    init_chain();
    init_iteratee();
    init_partial();
    init_bind();
    init_bindAll();
    init_memoize();
    init_delay();
    init_defer();
    init_throttle();
    init_debounce();
    init_wrap();
    init_negate();
    init_compose();
    init_after();
    init_before();
    init_once();
    init_findKey();
    init_findIndex();
    init_findLastIndex();
    init_sortedIndex();
    init_indexOf();
    init_lastIndexOf();
    init_find();
    init_findWhere();
    init_each();
    init_map();
    init_reduce();
    init_reduceRight();
    init_filter();
    init_reject();
    init_every();
    init_some();
    init_contains();
    init_invoke();
    init_pluck();
    init_where();
    init_max();
    init_min();
    init_shuffle();
    init_sample();
    init_sortBy();
    init_groupBy();
    init_indexBy();
    init_countBy();
    init_partition();
    init_toArray();
    init_size();
    init_pick();
    init_omit();
    init_first();
    init_initial();
    init_last();
    init_rest();
    init_compact();
    init_flatten2();
    init_without();
    init_uniq();
    init_union();
    init_intersection();
    init_difference();
    init_unzip();
    init_zip();
    init_object();
    init_range();
    init_chunk();
    init_mixin();
    init_underscore_array_methods();
  }
});

// node_modules/underscore/modules/index-default.js
var _2, index_default_default;
var init_index_default = __esm({
  "node_modules/underscore/modules/index-default.js"() {
    init_modules();
    init_modules();
    _2 = mixin(modules_exports);
    _2._ = _2;
    index_default_default = _2;
  }
});

// node_modules/underscore/modules/index-all.js
var index_all_exports = {};
__export(index_all_exports, {
  VERSION: () => VERSION,
  after: () => after,
  all: () => every,
  allKeys: () => allKeys,
  any: () => some,
  assign: () => extendOwn_default,
  before: () => before,
  bind: () => bind_default,
  bindAll: () => bindAll_default,
  chain: () => chain,
  chunk: () => chunk,
  clone: () => clone,
  collect: () => map,
  compact: () => compact,
  compose: () => compose,
  constant: () => constant,
  contains: () => contains,
  countBy: () => countBy_default,
  create: () => create,
  debounce: () => debounce,
  default: () => index_default_default,
  defaults: () => defaults_default,
  defer: () => defer_default,
  delay: () => delay_default,
  detect: () => find,
  difference: () => difference_default,
  drop: () => rest,
  each: () => each,
  escape: () => escape_default,
  every: () => every,
  extend: () => extend_default,
  extendOwn: () => extendOwn_default,
  filter: () => filter,
  find: () => find,
  findIndex: () => findIndex_default,
  findKey: () => findKey,
  findLastIndex: () => findLastIndex_default,
  findWhere: () => findWhere,
  first: () => first,
  flatten: () => flatten2,
  foldl: () => reduce_default,
  foldr: () => reduceRight_default,
  forEach: () => each,
  functions: () => functions,
  get: () => get,
  groupBy: () => groupBy_default,
  has: () => has2,
  head: () => first,
  identity: () => identity,
  include: () => contains,
  includes: () => contains,
  indexBy: () => indexBy_default,
  indexOf: () => indexOf_default,
  initial: () => initial,
  inject: () => reduce_default,
  intersection: () => intersection,
  invert: () => invert,
  invoke: () => invoke_default,
  isArguments: () => isArguments_default,
  isArray: () => isArray_default,
  isArrayBuffer: () => isArrayBuffer_default,
  isBoolean: () => isBoolean,
  isDataView: () => isDataView_default,
  isDate: () => isDate_default,
  isElement: () => isElement,
  isEmpty: () => isEmpty,
  isEqual: () => isEqual,
  isError: () => isError_default,
  isFinite: () => isFinite2,
  isFunction: () => isFunction_default,
  isMap: () => isMap_default,
  isMatch: () => isMatch,
  isNaN: () => isNaN2,
  isNull: () => isNull,
  isNumber: () => isNumber_default,
  isObject: () => isObject,
  isRegExp: () => isRegExp_default,
  isSet: () => isSet_default,
  isString: () => isString_default,
  isSymbol: () => isSymbol_default,
  isTypedArray: () => isTypedArray_default,
  isUndefined: () => isUndefined,
  isWeakMap: () => isWeakMap_default,
  isWeakSet: () => isWeakSet_default,
  iteratee: () => iteratee,
  keys: () => keys,
  last: () => last,
  lastIndexOf: () => lastIndexOf_default,
  map: () => map,
  mapObject: () => mapObject,
  matcher: () => matcher,
  matches: () => matcher,
  max: () => max,
  memoize: () => memoize,
  methods: () => functions,
  min: () => min,
  mixin: () => mixin,
  negate: () => negate,
  noop: () => noop,
  now: () => now_default,
  object: () => object,
  omit: () => omit_default,
  once: () => once_default,
  pairs: () => pairs,
  partial: () => partial_default,
  partition: () => partition_default,
  pick: () => pick_default,
  pluck: () => pluck,
  property: () => property,
  propertyOf: () => propertyOf,
  random: () => random,
  range: () => range,
  reduce: () => reduce_default,
  reduceRight: () => reduceRight_default,
  reject: () => reject,
  rest: () => rest,
  restArguments: () => restArguments,
  result: () => result,
  sample: () => sample,
  select: () => filter,
  shuffle: () => shuffle,
  size: () => size,
  some: () => some,
  sortBy: () => sortBy,
  sortedIndex: () => sortedIndex,
  tail: () => rest,
  take: () => first,
  tap: () => tap,
  template: () => template,
  templateSettings: () => templateSettings_default,
  throttle: () => throttle,
  times: () => times,
  toArray: () => toArray,
  toPath: () => toPath,
  transpose: () => unzip,
  unescape: () => unescape_default,
  union: () => union_default,
  uniq: () => uniq,
  unique: () => uniq,
  uniqueId: () => uniqueId,
  unzip: () => unzip,
  values: () => values,
  where: () => where,
  without: () => without_default,
  wrap: () => wrap,
  zip: () => zip_default
});
var init_index_all = __esm({
  "node_modules/underscore/modules/index-all.js"() {
    init_index_default();
    init_modules();
  }
});

// node_modules/mongoo/lib/plugins/timestamps.js
var require_timestamps = __commonJS({
  "node_modules/mongoo/lib/plugins/timestamps.js"(exports2, module2) {
    var Belt2 = require_belt();
    var _3 = (init_index_all(), __toCommonJS(index_all_exports));
    module2.exports = function(schema, options) {
      var o = options || {};
      o = _3.defaults(o, {
        "created_path": "created_at",
        "updated_path": "updated_at"
      });
      schema.add(_3.object([o.created_path], [{ "type": Date }]));
      schema.add(_3.object([o.updated_path], [{ "type": Date }]));
      schema.pre("save", function(next) {
        var time = /* @__PURE__ */ new Date();
        if (this.isNew)
          this.set(o.created_path, time);
        if (this.isModified())
          this.set(o.updated_path, time);
        return next();
      });
      return schema;
    };
  }
});
export default require_timestamps();
//# sourceMappingURL=mongoo_lib_plugins_timestamps.js.map
